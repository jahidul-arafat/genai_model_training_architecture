class AWSGenAIArchitecture{constructor(){this.canvas=document.getElementById("canvas");this.ctx=this.canvas.getContext("2d");this.canvasContainer=document.getElementById("canvasContainer");this.tooltip=document.getElementById("tooltip");this.draggingIndicator=document.getElementById("draggingIndicator");this.services=[];this.communications=[];this.animationSpeed=1;this.isPaused=false;this.isTraining=false;this.trainingProgress=0;this.currentTemplate="standard";this.isDragging=false;this.draggedService=null;this.mousePos={x:0,y:0};this.lastMousePos={x:0,y:0};this.consoleVisible=true;this.maxConsoleEntries=50;this.scaledInstances=[];this.baseCosts={};this.awsMetrics={trainingInstances:4,gpuUtilization:78,modelParams:"70B",trainingLoss:2.34,throughput:"1.2k tokens/sec",dataProcessed:"2.3TB",networkIO:"450 MB/s",reliabilityScore:99.2,costPerHour:892};this.deploymentTemplates={standard:{name:"Standard Training Pipeline",description:"Comprehensive LLM training with SageMaker, EC2, and managed services",badge:"Standard Template"},"eks-kubernetes":{name:"EKS Kubernetes Cluster",description:"Container-orchestrated training with Kubernetes on AWS EKS",badge:"Kubernetes Template"},"batch-hpc":{name:"AWS Batch HPC Training",description:"High-performance computing with AWS Batch for massive parallel training",badge:"HPC Template"},"emr-spark":{name:"EMR Spark Distributed",description:"Apache Spark on EMR for distributed data processing and training",badge:"Spark Template"},"fargate-serverless":{name:"Fargate Serverless",description:"Serverless container training with AWS Fargate auto-scaling",badge:"Serverless Template"},parallelcluster:{name:"AWS ParallelCluster",description:"HPC cluster with Slurm scheduler for large-scale model training",badge:"HPC Cluster Template"},"hybrid-multicloud":{name:"Hybrid Multi-Cloud",description:"Multi-cloud deployment with on-premises and AWS hybrid architecture",badge:"Hybrid Template"},"edge-federated":{name:"Edge Federated Learning",description:"Distributed federated learning across edge devices and AWS regions",badge:"Federated Template"}};this.setupCanvas();this.setupEventListeners();this.initializeDeploymentTemplate("standard");this.createFloatingParticles();this.animate();this.startMetricsUpdater()}setupCanvas(){const rect=this.canvas.getBoundingClientRect();this.canvas.width=rect.width*2;this.canvas.height=rect.height*2;this.ctx.scale(2,2);window.addEventListener("resize",(()=>{const rect=this.canvas.getBoundingClientRect();this.canvas.width=rect.width*2;this.canvas.height=rect.height*2;this.ctx.scale(2,2)}))}setupEventListeners(){this.canvas.addEventListener("mousedown",(e=>this.handleMouseDown(e)));this.canvas.addEventListener("mousemove",(e=>this.handleMouseMove(e)));this.canvas.addEventListener("mouseup",(e=>this.handleMouseUp(e)));this.canvas.addEventListener("mouseleave",(e=>this.handleMouseLeave(e)));this.canvas.addEventListener("contextmenu",(e=>e.preventDefault()))}initializeDeploymentTemplate(templateId){this.currentTemplate=templateId;this.services=[];this.communications=[];const template=this.deploymentTemplates[templateId];const deploymentBadge=document.getElementById("deploymentBadge");const templateInfo=document.getElementById("templateInfo");if(deploymentBadge){deploymentBadge.textContent=template.badge}if(templateInfo){templateInfo.textContent=template.description}switch(templateId){case"standard":this.initializeStandardTemplate();break;case"eks-kubernetes":this.initializeEKSTemplate();break;case"batch-hpc":this.initializeBatchTemplate();break;case"emr-spark":this.initializeEMRTemplate();break;case"fargate-serverless":this.initializeFargateTemplate();break;case"parallelcluster":this.initializeParallelClusterTemplate();break;case"hybrid-multicloud":this.initializeHybridTemplate();break;case"edge-federated":this.initializeFederatedTemplate();break}this.updateLegend();this.initializeBaseCosts();this.updateCostTracker();this.logToConsole(`üèóÔ∏è Template changed to: ${this.deploymentTemplates[templateId].name}`,"system")}initializeStandardTemplate(){const centerX=this.canvas.width/4;const centerY=this.canvas.height/4;this.services.push({id:"S3_DATALAKE",name:"S3 Data Lake",x:centerX,y:centerY-200,radius:65,baseRadius:65,color:"#ff6b35",gradient:["#ff6b35","#ff4757"],activity:0,pulse:0,awsService:"S3",instanceType:"Storage",vCPUs:"N/A",memory:"Unlimited",utilization:45,throughput:"2.1 GB/s",latency:12,healthStatus:"Healthy",launchTime:Date.now()-864e5,slaTarget:99.9,costPerHour:150,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(8),membrane:{thickness:4,opacity:.9},reliabilityScore:99.8});this.services.push({id:"SAGEMAKER_TRAINING",name:"SageMaker Training",x:centerX-300,y:centerY,radius:75,baseRadius:75,color:"#00d4aa",gradient:["#00d4aa","#0080ff"],activity:0,pulse:0,awsService:"SageMaker",instanceType:"ml.p4d.24xlarge",vCPUs:96,memory:1152,utilization:85,throughput:"1.2k tokens/sec",latency:45,healthStatus:"Healthy",launchTime:Date.now()-432e5,slaTarget:99.5,costPerHour:458,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(12),membrane:{thickness:5,opacity:.95},reliabilityScore:99.1});this.services.push({id:"EC2_TRAINING_NODES",name:"EC2 Training Cluster",x:centerX+300,y:centerY,radius:70,baseRadius:70,color:"#ff9500",gradient:["#ff9500","#ff6b35"],activity:0,pulse:0,awsService:"EC2",instanceType:"p4d.24xlarge",vCPUs:96,memory:1152,utilization:92,throughput:"980 tokens/sec",latency:38,healthStatus:"Healthy",launchTime:Date.now()-216e5,slaTarget:99,costPerHour:434,isSpot:true,availabilityZone:"us-east-1b",organelles:this.createOrganelles(10),membrane:{thickness:4,opacity:.9},reliabilityScore:98.7});this.services.push({id:"BEDROCK_MODELS",name:"Bedrock Foundation",x:centerX,y:centerY+250,radius:60,baseRadius:60,color:"#9966cc",gradient:["#9966cc","#6b46c1"],activity:0,pulse:0,awsService:"Bedrock",instanceType:"Managed Service",vCPUs:"Elastic",memory:"Elastic",utilization:35,throughput:"500 tokens/sec",latency:120,healthStatus:"Healthy",launchTime:Date.now()-72e5,slaTarget:99.9,costPerHour:125,isSpot:false,availabilityZone:"us-east-1c",organelles:this.createOrganelles(6),membrane:{thickness:3,opacity:.85},reliabilityScore:99.5});this.services.push({id:"LAMBDA_PREPROCESSING",name:"Lambda Data Pipeline",x:centerX-150,y:centerY-300,radius:45,baseRadius:45,color:"#ffa502",gradient:["#ffa502","#ff9500"],activity:0,pulse:0,awsService:"Lambda",instanceType:"15GB Memory",vCPUs:"6 vCPU equiv",memory:15,utilization:65,throughput:"2.5k requests/sec",latency:25,healthStatus:"Healthy",launchTime:Date.now()-36e5,slaTarget:99.95,costPerHour:45,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(4),membrane:{thickness:2,opacity:.8},reliabilityScore:99.6});this.services.push({id:"ECS_SERVING",name:"ECS Model Serving",x:centerX+150,y:centerY+150,radius:50,baseRadius:50,color:"#0080ff",gradient:["#0080ff","#00d4aa"],activity:0,pulse:0,awsService:"ECS",instanceType:"c5.4xlarge",vCPUs:16,memory:32,utilization:58,throughput:"850 requests/sec",latency:15,healthStatus:"Healthy",launchTime:Date.now()-144e5,slaTarget:99.5,costPerHour:95,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(5),membrane:{thickness:3,opacity:.85},reliabilityScore:99.3});this.services.push({id:"CLOUDWATCH_MONITORING",name:"CloudWatch Monitor",x:centerX-200,y:centerY+200,radius:40,baseRadius:40,color:"#ff6b6b",gradient:["#ff6b6b","#ff8e53"],activity:0,pulse:0,awsService:"CloudWatch",instanceType:"Managed Service",vCPUs:"N/A",memory:"N/A",utilization:25,throughput:"10k metrics/sec",latency:8,healthStatus:"Healthy",launchTime:Date.now()-1728e5,slaTarget:99.9,costPerHour:25,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(3),membrane:{thickness:2,opacity:.8},reliabilityScore:99.7})}initializeEKSTemplate(){const centerX=this.canvas.width/4;const centerY=this.canvas.height/4;this.services.push({id:"EKS_CONTROL_PLANE",name:"EKS Control Plane",x:centerX,y:centerY-250,radius:70,baseRadius:70,color:"#326ce5",gradient:["#326ce5","#1565c0"],activity:0,pulse:0,awsService:"EKS",instanceType:"Managed Control Plane",vCPUs:"Managed",memory:"Managed",utilization:45,throughput:"5k API calls/sec",latency:5,healthStatus:"Healthy",launchTime:Date.now()-1728e5,slaTarget:99.95,costPerHour:75,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(8),membrane:{thickness:4,opacity:.9},reliabilityScore:99.9});this.services.push({id:"EKS_WORKER_GROUP_1",name:"GPU Worker Nodes",x:centerX-250,y:centerY-50,radius:65,baseRadius:65,color:"#ff9500",gradient:["#ff9500","#ff6b35"],activity:0,pulse:0,awsService:"EKS",instanceType:"p4d.24xlarge",vCPUs:96,memory:1152,utilization:88,throughput:"1.5k tokens/sec",latency:35,healthStatus:"Healthy",launchTime:Date.now()-864e5,slaTarget:99,costPerHour:520,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(12),membrane:{thickness:5,opacity:.95},reliabilityScore:98.8});this.services.push({id:"EKS_WORKER_GROUP_2",name:"CPU Worker Nodes",x:centerX+250,y:centerY-50,radius:55,baseRadius:55,color:"#00d4aa",gradient:["#00d4aa","#0080ff"],activity:0,pulse:0,awsService:"EKS",instanceType:"c5n.18xlarge",vCPUs:72,memory:192,utilization:65,throughput:"800 tokens/sec",latency:25,healthStatus:"Healthy",launchTime:Date.now()-432e5,slaTarget:99,costPerHour:385,isSpot:true,availabilityZone:"us-east-1b",organelles:this.createOrganelles(10),membrane:{thickness:4,opacity:.9},reliabilityScore:98.5});this.services.push({id:"EFS_STORAGE",name:"EFS Shared Storage",x:centerX-100,y:centerY+150,radius:50,baseRadius:50,color:"#ff6b35",gradient:["#ff6b35","#ff4757"],activity:0,pulse:0,awsService:"EFS",instanceType:"Managed NFS",vCPUs:"N/A",memory:"Unlimited",utilization:35,throughput:"1.5 GB/s",latency:8,healthStatus:"Healthy",launchTime:Date.now()-2592e5,slaTarget:99.9,costPerHour:85,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(6),membrane:{thickness:3,opacity:.85},reliabilityScore:99.7});this.services.push({id:"ALB_LOAD_BALANCER",name:"Application Load Balancer",x:centerX+100,y:centerY+150,radius:45,baseRadius:45,color:"#9966cc",gradient:["#9966cc","#6b46c1"],activity:0,pulse:0,awsService:"ELB",instanceType:"Application LB",vCPUs:"Managed",memory:"Managed",utilization:25,throughput:"10k requests/sec",latency:3,healthStatus:"Healthy",launchTime:Date.now()-1728e5,slaTarget:99.95,costPerHour:35,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(4),membrane:{thickness:2,opacity:.8},reliabilityScore:99.8});this.services.push({id:"ECR_REGISTRY",name:"ECR Container Registry",x:centerX,y:centerY+250,radius:40,baseRadius:40,color:"#ffa502",gradient:["#ffa502","#ff9500"],activity:0,pulse:0,awsService:"ECR",instanceType:"Container Registry",vCPUs:"N/A",memory:"N/A",utilization:15,throughput:"500 pulls/min",latency:12,healthStatus:"Healthy",launchTime:Date.now()-2592e5,slaTarget:99.9,costPerHour:15,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(3),membrane:{thickness:2,opacity:.8},reliabilityScore:99.6})}initializeBatchTemplate(){const centerX=this.canvas.width/4;const centerY=this.canvas.height/4;this.services.push({id:"BATCH_COMPUTE_ENV",name:"Batch Compute Environment",x:centerX,y:centerY-200,radius:80,baseRadius:80,color:"#ff6b6b",gradient:["#ff6b6b","#ff4757"],activity:0,pulse:0,awsService:"Batch",instanceType:"Managed Compute",vCPUs:"Auto-scaling",memory:"Auto-scaling",utilization:75,throughput:"2.5k jobs/hour",latency:45,healthStatus:"Healthy",launchTime:Date.now()-864e5,slaTarget:99,costPerHour:650,isSpot:true,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(15),membrane:{thickness:6,opacity:.95},reliabilityScore:98.9});this.services.push({id:"HPC_CLUSTER_1",name:"HPC GPU Cluster",x:centerX-300,y:centerY,radius:70,baseRadius:70,color:"#ff9500",gradient:["#ff9500","#ff6b35"],activity:0,pulse:0,awsService:"Batch",instanceType:"p4de.24xlarge",vCPUs:96,memory:1152,utilization:95,throughput:"1.8k tokens/sec",latency:28,healthStatus:"Healthy",launchTime:Date.now()-432e5,slaTarget:98.5,costPerHour:580,isSpot:true,availabilityZone:"us-east-1a",organelles:this.createOrganelles(12),membrane:{thickness:5,opacity:.95},reliabilityScore:98.2});this.services.push({id:"HPC_CLUSTER_2",name:"HPC CPU Cluster",x:centerX+300,y:centerY,radius:65,baseRadius:65,color:"#00d4aa",gradient:["#00d4aa","#0080ff"],activity:0,pulse:0,awsService:"Batch",instanceType:"hpc6a.48xlarge",vCPUs:96,memory:384,utilization:82,throughput:"1.2k jobs/sec",latency:15,healthStatus:"Healthy",launchTime:Date.now()-216e5,slaTarget:98.5,costPerHour:425,isSpot:true,availabilityZone:"us-east-1b",organelles:this.createOrganelles(10),membrane:{thickness:4,opacity:.9},reliabilityScore:98.1});this.services.push({id:"BATCH_JOB_QUEUE",name:"Job Queue Manager",x:centerX,y:centerY+200,radius:55,baseRadius:55,color:"#9966cc",gradient:["#9966cc","#6b46c1"],activity:0,pulse:0,awsService:"Batch",instanceType:"Job Scheduler",vCPUs:"Managed",memory:"Managed",utilization:45,throughput:"500 jobs/min",latency:5,healthStatus:"Healthy",launchTime:Date.now()-1728e5,slaTarget:99.5,costPerHour:85,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(8),membrane:{thickness:4,opacity:.9},reliabilityScore:99.3});this.services.push({id:"FSX_LUSTRE",name:"FSx Lustre Storage",x:centerX-150,y:centerY+300,radius:50,baseRadius:50,color:"#ff6b35",gradient:["#ff6b35","#ff4757"],activity:0,pulse:0,awsService:"FSx",instanceType:"Lustre HPC Storage",vCPUs:"N/A",memory:"N/A",utilization:55,throughput:"100 GB/s",latency:2,healthStatus:"Healthy",launchTime:Date.now()-2592e5,slaTarget:99.9,costPerHour:185,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(6),membrane:{thickness:3,opacity:.85},reliabilityScore:99.4})}initializeEMRTemplate(){const centerX=this.canvas.width/4;const centerY=this.canvas.height/4;this.services.push({id:"EMR_MASTER",name:"EMR Master Node",x:centerX,y:centerY-200,radius:70,baseRadius:70,color:"#4caf50",gradient:["#4caf50","#2e7d32"],activity:0,pulse:0,awsService:"EMR",instanceType:"m5.2xlarge",vCPUs:8,memory:32,utilization:55,throughput:"1k jobs/sec",latency:15,healthStatus:"Healthy",launchTime:Date.now()-1728e5,slaTarget:99.5,costPerHour:125,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(8),membrane:{thickness:4,opacity:.9},reliabilityScore:99.2});this.services.push({id:"SPARK_WORKERS",name:"Spark Worker Nodes",x:centerX-280,y:centerY,radius:65,baseRadius:65,color:"#ff9500",gradient:["#ff9500","#ff6b35"],activity:0,pulse:0,awsService:"EMR",instanceType:"r5.8xlarge",vCPUs:32,memory:256,utilization:78,throughput:"2.2k partitions/sec",latency:25,healthStatus:"Healthy",launchTime:Date.now()-864e5,slaTarget:99,costPerHour:385,isSpot:true,availabilityZone:"us-east-1a",organelles:this.createOrganelles(12),membrane:{thickness:5,opacity:.95},reliabilityScore:98.8});this.services.push({id:"EMR_GPU_NODES",name:"GPU Accelerated Nodes",x:centerX+280,y:centerY,radius:68,baseRadius:68,color:"#00d4aa",gradient:["#00d4aa","#0080ff"],activity:0,pulse:0,awsService:"EMR",instanceType:"p3.8xlarge",vCPUs:32,memory:244,utilization:88,throughput:"1.5k tokens/sec",latency:35,healthStatus:"Healthy",launchTime:Date.now()-432e5,slaTarget:99,costPerHour:465,isSpot:true,availabilityZone:"us-east-1b",organelles:this.createOrganelles(11),membrane:{thickness:5,opacity:.95},reliabilityScore:98.6});this.services.push({id:"HDFS_STORAGE",name:"HDFS Distributed Storage",x:centerX,y:centerY+200,radius:60,baseRadius:60,color:"#ff6b35",gradient:["#ff6b35","#ff4757"],activity:0,pulse:0,awsService:"EMR",instanceType:"HDFS Cluster",vCPUs:"Distributed",memory:"Distributed",utilization:65,throughput:"5.5 GB/s",latency:8,healthStatus:"Healthy",launchTime:Date.now()-2592e5,slaTarget:99.5,costPerHour:225,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(9),membrane:{thickness:4,opacity:.9},reliabilityScore:99.1});this.services.push({id:"JUPYTER_HUB",name:"Jupyter Hub",x:centerX-150,y:centerY+300,radius:45,baseRadius:45,color:"#9966cc",gradient:["#9966cc","#6b46c1"],activity:0,pulse:0,awsService:"EMR",instanceType:"m5.xlarge",vCPUs:4,memory:16,utilization:35,throughput:"50 notebooks/hour",latency:12,healthStatus:"Healthy",launchTime:Date.now()-1728e5,slaTarget:99,costPerHour:55,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(5),membrane:{thickness:3,opacity:.85},reliabilityScore:98.9})}initializeFargateTemplate(){const centerX=this.canvas.width/4;const centerY=this.canvas.height/4;this.services.push({id:"FARGATE_SERVICE",name:"Fargate Service Manager",x:centerX,y:centerY-200,radius:70,baseRadius:70,color:"#ff8a65",gradient:["#ff8a65","#ff5722"],activity:0,pulse:0,awsService:"Fargate",instanceType:"Serverless Container",vCPUs:"Auto-scaling",memory:"Auto-scaling",utilization:65,throughput:"1.8k tasks/hour",latency:25,healthStatus:"Healthy",launchTime:Date.now()-864e5,slaTarget:99.5,costPerHour:285,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(10),membrane:{thickness:4,opacity:.9},reliabilityScore:99.3});this.services.push({id:"TRAINING_TASKS",name:"Training Task Cluster",x:centerX-250,y:centerY-50,radius:65,baseRadius:65,color:"#00d4aa",gradient:["#00d4aa","#0080ff"],activity:0,pulse:0,awsService:"Fargate",instanceType:"16 vCPU, 32GB",vCPUs:16,memory:32,utilization:82,throughput:"950 tokens/sec",latency:35,healthStatus:"Healthy",launchTime:Date.now()-432e5,slaTarget:99,costPerHour:195,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(11),membrane:{thickness:5,opacity:.95},reliabilityScore:99.1});this.services.push({id:"DATA_PROCESSING_TASKS",name:"Data Processing Tasks",x:centerX+250,y:centerY-50,radius:60,baseRadius:60,color:"#ffa502",gradient:["#ffa502","#ff9500"],activity:0,pulse:0,awsService:"Fargate",instanceType:"8 vCPU, 16GB",vCPUs:8,memory:16,utilization:70,throughput:"1.2k records/sec",latency:18,healthStatus:"Healthy",launchTime:Date.now()-216e5,slaTarget:99,costPerHour:125,isSpot:false,availabilityZone:"us-east-1b",organelles:this.createOrganelles(9),membrane:{thickness:4,opacity:.9},reliabilityScore:99});this.services.push({id:"AUTO_SCALING_MANAGER",name:"Auto Scaling Manager",x:centerX,y:centerY+150,radius:55,baseRadius:55,color:"#9966cc",gradient:["#9966cc","#6b46c1"],activity:0,pulse:0,awsService:"ECS",instanceType:"Service Auto Scaling",vCPUs:"Managed",memory:"Managed",utilization:35,throughput:"500 scale events/hour",latency:8,healthStatus:"Healthy",launchTime:Date.now()-1728e5,slaTarget:99.9,costPerHour:45,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(6),membrane:{thickness:3,opacity:.85},reliabilityScore:99.6});this.services.push({id:"ALB_FARGATE",name:"Application Load Balancer",x:centerX-150,y:centerY+250,radius:50,baseRadius:50,color:"#ff6b6b",gradient:["#ff6b6b","#ff4757"],activity:0,pulse:0,awsService:"ELB",instanceType:"Application LB",vCPUs:"Managed",memory:"Managed",utilization:28,throughput:"15k requests/sec",latency:2,healthStatus:"Healthy",launchTime:Date.now()-2592e5,slaTarget:99.95,costPerHour:35,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(5),membrane:{thickness:3,opacity:.85},reliabilityScore:99.8});this.services.push({id:"CLOUDWATCH_FARGATE",name:"CloudWatch Monitoring",x:centerX+150,y:centerY+250,radius:45,baseRadius:45,color:"#ff9500",gradient:["#ff9500","#ff6b35"],activity:0,pulse:0,awsService:"CloudWatch",instanceType:"Managed Service",vCPUs:"N/A",memory:"N/A",utilization:22,throughput:"25k metrics/sec",latency:5,healthStatus:"Healthy",launchTime:Date.now()-2592e5,slaTarget:99.9,costPerHour:28,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(4),membrane:{thickness:2,opacity:.8},reliabilityScore:99.7})}initializeParallelClusterTemplate(){const centerX=this.canvas.width/4;const centerY=this.canvas.height/4;this.services.push({id:"PARALLELCLUSTER_HEAD",name:"ParallelCluster Head Node",x:centerX,y:centerY-220,radius:75,baseRadius:75,color:"#9c27b0",gradient:["#9c27b0","#6a1b9a"],activity:0,pulse:0,awsService:"ParallelCluster",instanceType:"c5n.4xlarge",vCPUs:16,memory:42,utilization:45,throughput:"2k job submissions/hour",latency:8,healthStatus:"Healthy",launchTime:Date.now()-1728e5,slaTarget:99.5,costPerHour:185,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(10),membrane:{thickness:5,opacity:.95},reliabilityScore:99.4});this.services.push({id:"GPU_COMPUTE_NODES",name:"GPU Compute Nodes",x:centerX-280,y:centerY-50,radius:70,baseRadius:70,color:"#ff9500",gradient:["#ff9500","#ff6b35"],activity:0,pulse:0,awsService:"ParallelCluster",instanceType:"p4d.24xlarge",vCPUs:96,memory:1152,utilization:92,throughput:"2.2k tokens/sec",latency:32,healthStatus:"Healthy",launchTime:Date.now()-864e5,slaTarget:98.5,costPerHour:520,isSpot:true,availabilityZone:"us-east-1a",organelles:this.createOrganelles(14),membrane:{thickness:6,opacity:.95},reliabilityScore:98.7});this.services.push({id:"CPU_COMPUTE_NODES",name:"CPU Compute Nodes",x:centerX+280,y:centerY-50,radius:65,baseRadius:65,color:"#00d4aa",gradient:["#00d4aa","#0080ff"],activity:0,pulse:0,awsService:"ParallelCluster",instanceType:"hpc6a.48xlarge",vCPUs:96,memory:384,utilization:85,throughput:"1.8k jobs/sec",latency:18,healthStatus:"Healthy",launchTime:Date.now()-432e5,slaTarget:98.5,costPerHour:425,isSpot:true,availabilityZone:"us-east-1b",organelles:this.createOrganelles(12),membrane:{thickness:5,opacity:.95},reliabilityScore:98.5});this.services.push({id:"SLURM_SCHEDULER",name:"Slurm Job Scheduler",x:centerX,y:centerY+150,radius:60,baseRadius:60,color:"#ff6b35",gradient:["#ff6b35","#ff4757"],activity:0,pulse:0,awsService:"ParallelCluster",instanceType:"Job Scheduler",vCPUs:"Managed",memory:"Managed",utilization:55,throughput:"1.5k jobs/hour",latency:3,healthStatus:"Healthy",launchTime:Date.now()-2592e5,slaTarget:99,costPerHour:95,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(8),membrane:{thickness:4,opacity:.9},reliabilityScore:99.1});this.services.push({id:"FSX_SHARED_STORAGE",name:"FSx Shared Storage",x:centerX-180,y:centerY+280,radius:55,baseRadius:55,color:"#9966cc",gradient:["#9966cc","#6b46c1"],activity:0,pulse:0,awsService:"FSx",instanceType:"Lustre Storage",vCPUs:"N/A",memory:"N/A",utilization:65,throughput:"200 GB/s",latency:1,healthStatus:"Healthy",launchTime:Date.now()-3456e5,slaTarget:99.9,costPerHour:225,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(7),membrane:{thickness:4,opacity:.9},reliabilityScore:99.6});this.services.push({id:"ENV_MANAGER",name:"Environment Manager",x:centerX+180,y:centerY+280,radius:50,baseRadius:50,color:"#ffa502",gradient:["#ffa502","#ff9500"],activity:0,pulse:0,awsService:"ParallelCluster",instanceType:"Management Service",vCPUs:"Managed",memory:"Managed",utilization:25,throughput:"200 env changes/hour",latency:12,healthStatus:"Healthy",launchTime:Date.now()-2592e5,slaTarget:99.5,costPerHour:65,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(5),membrane:{thickness:3,opacity:.85},reliabilityScore:99.3})}initializeHybridTemplate(){const centerX=this.canvas.width/4;const centerY=this.canvas.height/4;this.services.push({id:"DIRECT_CONNECT",name:"Direct Connect Gateway",x:centerX,y:centerY-250,radius:70,baseRadius:70,color:"#ff6b6b",gradient:["#ff6b6b","#ff4757"],activity:0,pulse:0,awsService:"DirectConnect",instanceType:"100Gbps Connection",vCPUs:"N/A",memory:"N/A",utilization:35,throughput:"80 Gbps",latency:2,healthStatus:"Healthy",launchTime:Date.now()-2592e6,slaTarget:99.95,costPerHour:285,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(8),membrane:{thickness:4,opacity:.9},reliabilityScore:99.8});this.services.push({id:"ON_PREMISES_DC",name:"On-Premises Data Center",x:centerX-300,y:centerY-100,radius:75,baseRadius:75,color:"#607d8b",gradient:["#607d8b","#455a64"],activity:0,pulse:0,awsService:"On-Premises",instanceType:"Physical Servers",vCPUs:"Variable",memory:"Variable",utilization:78,throughput:"1.5k tokens/sec",latency:45,healthStatus:"Healthy",launchTime:Date.now()-7776e6,slaTarget:98,costPerHour:650,isSpot:false,availabilityZone:"On-Premises",organelles:this.createOrganelles(12),membrane:{thickness:5,opacity:.95},reliabilityScore:97.8});this.services.push({id:"AWS_OUTPOSTS",name:"AWS Outposts",x:centerX+300,y:centerY-100,radius:68,baseRadius:68,color:"#ff9500",gradient:["#ff9500","#ff6b35"],activity:0,pulse:0,awsService:"Outposts",instanceType:"Hybrid Infrastructure",vCPUs:768,memory:6144,utilization:72,throughput:"1.8k tokens/sec",latency:25,healthStatus:"Healthy",launchTime:Date.now()-1296e6,slaTarget:99,costPerHour:485,isSpot:false,availabilityZone:"Outposts",organelles:this.createOrganelles(11),membrane:{thickness:5,opacity:.95},reliabilityScore:98.9});this.services.push({id:"MULTI_CLOUD_ORCHESTRATOR",name:"Multi-Cloud Orchestrator",x:centerX,y:centerY+150,radius:65,baseRadius:65,color:"#9966cc",gradient:["#9966cc","#6b46c1"],activity:0,pulse:0,awsService:"EKS",instanceType:"Hybrid Orchestration",vCPUs:"Distributed",memory:"Distributed",utilization:58,throughput:"800 workflows/hour",latency:15,healthStatus:"Healthy",launchTime:Date.now()-1728e5,slaTarget:99.5,costPerHour:325,isSpot:false,availabilityZone:"Multi-Cloud",organelles:this.createOrganelles(10),membrane:{thickness:4,opacity:.9},reliabilityScore:99.2});this.services.push({id:"EDGE_COMPUTING",name:"Edge Computing Nodes",x:centerX-200,y:centerY+280,radius:55,baseRadius:55,color:"#00d4aa",gradient:["#00d4aa","#0080ff"],activity:0,pulse:0,awsService:"Wavelength",instanceType:"Edge Instances",vCPUs:48,memory:192,utilization:65,throughput:"650 inferences/sec",latency:8,healthStatus:"Healthy",launchTime:Date.now()-864e5,slaTarget:98.5,costPerHour:225,isSpot:false,availabilityZone:"Edge Locations",organelles:this.createOrganelles(7),membrane:{thickness:4,opacity:.9},reliabilityScore:98.6});this.services.push({id:"GLOBAL_LOAD_BALANCER",name:"Global Load Balancer",x:centerX+200,y:centerY+280,radius:50,baseRadius:50,color:"#ffa502",gradient:["#ffa502","#ff9500"],activity:0,pulse:0,awsService:"CloudFront",instanceType:"Global CDN",vCPUs:"Global",memory:"Global",utilization:42,throughput:"50k requests/sec",latency:3,healthStatus:"Healthy",launchTime:Date.now()-2592e5,slaTarget:99.9,costPerHour:125,isSpot:false,availabilityZone:"Global",organelles:this.createOrganelles(6),membrane:{thickness:3,opacity:.85},reliabilityScore:99.7})}initializeFederatedTemplate(){const centerX=this.canvas.width/4;const centerY=this.canvas.height/4;this.services.push({id:"FEDERATED_AGGREGATOR",name:"Federated Aggregator",x:centerX,y:centerY-200,radius:75,baseRadius:75,color:"#e91e63",gradient:["#e91e63","#ad1457"],activity:0,pulse:0,awsService:"EKS",instanceType:"Federated Coordinator",vCPUs:32,memory:128,utilization:55,throughput:"200 model updates/hour",latency:25,healthStatus:"Healthy",launchTime:Date.now()-1728e5,slaTarget:99.5,costPerHour:285,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(12),membrane:{thickness:5,opacity:.95},reliabilityScore:99.3});this.services.push({id:"EDGE_CLUSTER_1",name:"Mobile Edge Devices",x:centerX-300,y:centerY-50,radius:60,baseRadius:60,color:"#ff9500",gradient:["#ff9500","#ff6b35"],activity:0,pulse:0,awsService:"IoT Greengrass",instanceType:"Mobile Devices",vCPUs:"Variable",memory:"Variable",utilization:45,throughput:"150 local updates/hour",latency:12,healthStatus:"Healthy",launchTime:Date.now()-864e5,slaTarget:95,costPerHour:85,isSpot:false,availabilityZone:"Edge-Mobile",organelles:this.createOrganelles(8),membrane:{thickness:3,opacity:.85},reliabilityScore:96.5});this.services.push({id:"EDGE_CLUSTER_2",name:"Hospital Edge Nodes",x:centerX+300,y:centerY-50,radius:65,baseRadius:65,color:"#00d4aa",gradient:["#00d4aa","#0080ff"],activity:0,pulse:0,awsService:"IoT Greengrass",instanceType:"Healthcare Edge",vCPUs:16,memory:64,utilization:68,throughput:"280 local inferences/hour",latency:8,healthStatus:"Healthy",launchTime:Date.now()-432e5,slaTarget:98,costPerHour:145,isSpot:false,availabilityZone:"Edge-Healthcare",organelles:this.createOrganelles(9),membrane:{thickness:4,opacity:.9},reliabilityScore:97.8});this.services.push({id:"PRIVACY_COORDINATOR",name:"Privacy Coordinator",x:centerX,y:centerY+150,radius:58,baseRadius:58,color:"#9966cc",gradient:["#9966cc","#6b46c1"],activity:0,pulse:0,awsService:"Lambda",instanceType:"Privacy Engine",vCPUs:12,memory:48,utilization:35,throughput:"500 privacy checks/hour",latency:15,healthStatus:"Healthy",launchTime:Date.now()-2592e5,slaTarget:99.9,costPerHour:125,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(7),membrane:{thickness:4,opacity:.9},reliabilityScore:99.6});this.services.push({id:"DIFFERENTIAL_PRIVACY",name:"Differential Privacy Engine",x:centerX-180,y:centerY+280,radius:50,baseRadius:50,color:"#ff6b35",gradient:["#ff6b35","#ff4757"],activity:0,pulse:0,awsService:"Lambda",instanceType:"Privacy Preserving",vCPUs:8,memory:32,utilization:28,throughput:"1k noise injections/hour",latency:5,healthStatus:"Healthy",launchTime:Date.now()-1728e5,slaTarget:99.5,costPerHour:85,isSpot:false,availabilityZone:"us-east-1a",organelles:this.createOrganelles(5),membrane:{thickness:3,opacity:.85},reliabilityScore:99.1});this.services.push({id:"SECURE_COMM_HUB",name:"Secure Communication Hub",x:centerX+180,y:centerY+280,radius:52,baseRadius:52,color:"#ffa502",gradient:["#ffa502","#ff9500"],activity:0,pulse:0,awsService:"KMS",instanceType:"Encrypted Communication",vCPUs:"Managed",memory:"Managed",utilization:22,throughput:"2k encrypted msgs/hour",latency:3,healthStatus:"Healthy",launchTime:Date.now()-3456e5,slaTarget:99.9,costPerHour:95,isSpot:false,availabilityZone:"Multi-AZ",organelles:this.createOrganelles(6),membrane:{thickness:3,opacity:.85},reliabilityScore:99.8})}createOrganelles(count){const organelles=[];for(let i=0;i<count;i++){organelles.push({x:(Math.random()-.5)*80,y:(Math.random()-.5)*80,radius:3+Math.random()*6,speed:.3+Math.random()*.8,angle:Math.random()*Math.PI*2,color:`hsl(${200+Math.random()*80}, 70%, 65%)`})}return organelles}updateLegend(){const architectureContent=document.getElementById("architectureContent");const template=this.currentTemplate;let legendHTML="";let architectureHTML="";switch(template){case"standard":architectureHTML=`\n                        <div class="arch-section">\n                            <h4>Core Components</h4>\n                            <ul class="component-list">\n                                <li><strong>S3 Data Lake:</strong> Centralized storage for training datasets, model artifacts, and checkpoints</li>\n                                <li><strong>SageMaker Training:</strong> Managed ML training with built-in algorithms and custom containers</li>\n                                <li><strong>EC2 Training Cluster:</strong> Distributed training across multiple GPU instances (p4d.24xlarge)</li>\n                                <li><strong>Bedrock Foundation Models:</strong> Pre-trained LLMs for fine-tuning and inference</li>\n                                <li><strong>Lambda Data Pipeline:</strong> Serverless data preprocessing and transformation</li>\n                                <li><strong>ECS Model Serving:</strong> Containerized model deployment and inference</li>\n                                <li><strong>CloudWatch Monitoring:</strong> Real-time metrics, logs, and alerting</li>\n                            </ul>\n                        </div>\n\n                        <div class="arch-section">\n                            <h4>Training Workflow</h4>\n                            <div class="workflow-step">1. Data ingestion from multiple sources into S3 Data Lake</div>\n                            <div class="workflow-step">2. Lambda functions preprocess and validate data quality</div>\n                            <div class="workflow-step">3. SageMaker orchestrates distributed training across EC2 instances</div>\n                            <div class="workflow-step">4. Model checkpoints saved to S3 with versioning</div>\n                            <div class="workflow-step">5. Trained models deployed via ECS for inference</div>\n                            <div class="workflow-step">6. CloudWatch monitors performance and costs</div>\n                        </div>\n\n                        <div class="benefits-list">\n                            <h5>Key Benefits</h5>\n                            <ul>\n                                <li>Managed services reduce operational overhead</li>\n                                <li>Auto-scaling for cost optimization</li>\n                                <li>Integrated with AWS ML ecosystem</li>\n                                <li>Built-in security and compliance</li>\n                                <li>Pay-per-use pricing model</li>\n                            </ul>\n                        </div>\n\n                        <div class="cost-estimate">\n                            <div class="cost-label">Estimated Monthly Cost</div>\n                            <div class="cost-value">$19,500 - $35,000</div>\n                        </div>`;break;case"eks-kubernetes":legendHTML=`\n                        <div class="legend-section">\n                            <h4>Kubernetes Services</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #326ce5, #1565c0);"></div>\n                                <span>EKS Control Plane</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff9500, #ff6b35);"></div>\n                                <span>GPU Worker Nodes</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #00d4aa, #0080ff);"></div>\n                                <span>CPU Worker Nodes</span>\n                            </div>\n                        </div>\n                        <div class="legend-section">\n                            <h4>Storage & Networking</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff6b35, #ff4757);"></div>\n                                <span>EFS Shared Storage</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #9966cc, #6b46c1);"></div>\n                                <span>Application Load Balancer</span>\n                            </div>\n                        </div>`;architectureHTML=`\n                        <div class="arch-section">\n                            <h4>Kubernetes Components</h4>\n                            <ul class="component-list">\n                                <li><strong>EKS Control Plane:</strong> Managed Kubernetes API server with HA across AZs</li>\n                                <li><strong>GPU Worker Nodes:</strong> P4d instances for intensive ML training workloads</li>\n                                <li><strong>CPU Worker Nodes:</strong> C5n instances for data processing and orchestration</li>\n                                <li><strong>EFS Shared Storage:</strong> NFS-compatible shared file system for datasets</li>\n                                <li><strong>ALB Load Balancer:</strong> Traffic distribution and SSL termination</li>\n                                <li><strong>ECR Registry:</strong> Private container registry for ML training images</li>\n                            </ul>\n                        </div>\n\n                        <div class="arch-section">\n                            <h4>Container Orchestration</h4>\n                            <div class="workflow-step">1. ML training jobs deployed as Kubernetes pods</div>\n                            <div class="workflow-step">2. HPA scales pods based on CPU/GPU utilization</div>\n                            <div class="workflow-step">3. Node autoscaler provisions EC2 instances as needed</div>\n                            <div class="workflow-step">4. Jobs access shared datasets via EFS volumes</div>\n                            <div class="workflow-step">5. Service mesh manages inter-pod communication</div>\n                            <div class="workflow-step">6. Helm charts manage complex ML pipeline deployments</div>\n                        </div>\n\n                        <div class="benefits-list">\n                            <h5>Container Advantages</h5>\n                            <ul>\n                                <li>Cloud-native microservices architecture</li>\n                                <li>Horizontal pod autoscaling</li>\n                                <li>Rolling updates with zero downtime</li>\n                                <li>Resource isolation and multi-tenancy</li>\n                                <li>Portable across cloud providers</li>\n                            </ul>\n                        </div>\n\n                        <div class="cost-estimate">\n                            <div class="cost-label">Estimated Monthly Cost</div>\n                            <div class="cost-value">$23,200 - $42,000</div>\n                        </div>`;break;case"batch-hpc":legendHTML=`\n                        <div class="legend-section">\n                            <h4>HPC Components</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff6b6b, #ff4757);"></div>\n                                <span>Batch Compute Environment</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff9500, #ff6b35);"></div>\n                                <span>HPC GPU Cluster</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #00d4aa, #0080ff);"></div>\n                                <span>HPC CPU Cluster</span>\n                            </div>\n                        </div>\n                        <div class="legend-section">\n                            <h4>Scheduling & Storage</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #9966cc, #6b46c1);"></div>\n                                <span>Job Queue Manager</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff6b35, #ff4757);"></div>\n                                <span>FSx Lustre Storage</span>\n                            </div>\n                        </div>`;architectureHTML=`\n                        <div class="arch-section">\n                            <h4>HPC Infrastructure</h4>\n                            <ul class="component-list">\n                                <li><strong>Batch Compute Environment:</strong> Auto-scaling HPC clusters with spot pricing</li>\n                                <li><strong>HPC GPU Cluster:</strong> P4de instances with NVLink for multi-GPU training</li>\n                                <li><strong>HPC CPU Cluster:</strong> Hpc6a instances optimized for compute-intensive tasks</li>\n                                <li><strong>Job Queue Manager:</strong> Priority-based scheduling and resource allocation</li>\n                                <li><strong>FSx Lustre Storage:</strong> High-performance parallel file system (200GB/s)</li>\n                                <li><strong>Placement Groups:</strong> Low-latency 10Gbps networking between nodes</li>\n                            </ul>\n                        </div>\n\n                        <div class="arch-section">\n                            <h4>HPC Workflow</h4>\n                            <div class="workflow-step">1. Large-scale training jobs submitted to Batch queue</div>\n                            <div class="workflow-step">2. Scheduler provisions optimal instance mix (GPU/CPU)</div>\n                            <div class="workflow-step">3. MPI framework distributes work across nodes</div>\n                            <div class="workflow-step">4. High-speed Lustre storage enables parallel I/O</div>\n                            <div class="workflow-step">5. Spot instances reduce costs by up to 70%</div>\n                            <div class="workflow-step">6. Array jobs enable massive parallel processing</div>\n                        </div>\n\n                        <div class="benefits-list">\n                            <h5>HPC Advantages</h5>\n                            <ul>\n                                <li>Massive parallel processing capabilities</li>\n                                <li>Ultra-low latency networking</li>\n                                <li>Cost-effective spot instance usage</li>\n                                <li>Scientific computing optimizations</li>\n                                <li>Scales to thousands of cores</li>\n                            </ul>\n                        </div>\n\n                        <div class="cost-estimate">\n                            <div class="cost-label">Estimated Monthly Cost</div>\n                            <div class="cost-value">$35,800 - $65,000</div>\n                        </div>`;break;case"emr-spark":legendHTML=`\n                        <div class="legend-section">\n                            <h4>EMR Cluster</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #4caf50, #2e7d32);"></div>\n                                <span>EMR Master Node</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff9500, #ff6b35);"></div>\n                                <span>Spark Worker Nodes</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #00d4aa, #0080ff);"></div>\n                                <span>GPU Accelerated Nodes</span>\n                            </div>\n                        </div>\n                        <div class="legend-section">\n                            <h4>Storage & Development</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff6b35, #ff4757);"></div>\n                                <span>HDFS Distributed Storage</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #9966cc, #6b46c1);"></div>\n                                <span>Jupyter Hub</span>\n                            </div>\n                        </div>`;architectureHTML=`\n                        <div class="arch-section">\n                            <h4>Spark Ecosystem</h4>\n                            <ul class="component-list">\n                                <li><strong>EMR Master Node:</strong> Spark driver and cluster resource manager</li>\n                                <li><strong>Spark Worker Nodes:</strong> R5 instances for in-memory data processing</li>\n                                <li><strong>GPU Accelerated Nodes:</strong> P3 instances with Rapids for GPU-accelerated ML</li>\n                                <li><strong>HDFS Storage:</strong> Distributed file system with 3x replication</li>\n                                <li><strong>Jupyter Hub:</strong> Multi-user notebook environment for data scientists</li>\n                                <li><strong>Hive Metastore:</strong> Centralized metadata catalog for datasets</li>\n                            </ul>\n                        </div>\n\n                        <div class="arch-section">\n                            <h4>Distributed Processing</h4>\n                            <div class="workflow-step">1. Massive datasets loaded into HDFS across cluster</div>\n                            <div class="workflow-step">2. Spark SQL queries partition data for parallel processing</div>\n                            <div class="workflow-step">3. MLlib algorithms distributed across worker nodes</div>\n                            <div class="workflow-step">4. GPU nodes accelerate deep learning workloads</div>\n                            <div class="workflow-step">5. Dynamic allocation scales executors based on workload</div>\n                            <div class="workflow-step">6. Results cached in memory for iterative algorithms</div>\n                        </div>\n\n                        <div class="benefits-list">\n                            <h5>Big Data Benefits</h5>\n                            <ul>\n                                <li>Petabyte-scale data processing</li>\n                                <li>In-memory computing for speed</li>\n                                <li>Unified analytics platform</li>\n                                <li>Advanced ML library integration</li>\n                                <li>SQL interface for data analysts</li>\n                            </ul>\n                        </div>\n\n                        <div class="cost-estimate">\n                            <div class="cost-label">Estimated Monthly Cost</div>\n                            <div class="cost-value">$28,500 - $48,000</div>\n                        </div>`;break;case"fargate-serverless":legendHTML=`\n                        <div class="legend-section">\n                            <h4>Serverless Components</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff8a65, #ff5722);"></div>\n                                <span>Fargate Service Manager</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #00d4aa, #0080ff);"></div>\n                                <span>Training Task Cluster</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ffa502, #ff9500);"></div>\n                                <span>Data Processing Tasks</span>\n                            </div>\n                        </div>\n                        <div class="legend-section">\n                            <h4>Auto-Scaling & Monitoring</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #9966cc, #6b46c1);"></div>\n                                <span>Auto Scaling Manager</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff6b6b, #ff4757);"></div>\n                                <span>Application Load Balancer</span>\n                            </div>\n                        </div>`;architectureHTML=`\n                        <div class="arch-section">\n                            <h4>Serverless Architecture</h4>\n                            <ul class="component-list">\n                                <li><strong>Fargate Service Manager:</strong> Serverless container orchestration</li>\n                                <li><strong>Training Task Cluster:</strong> ML training containers with auto-scaling</li>\n                                <li><strong>Data Processing Tasks:</strong> ETL pipelines as serverless containers</li>\n                                <li><strong>Auto Scaling Manager:</strong> Target tracking and scheduled scaling</li>\n                                <li><strong>ALB Load Balancer:</strong> Traffic distribution across tasks</li>\n                                <li><strong>CloudWatch Integration:</strong> Container insights and custom metrics</li>\n                            </ul>\n                        </div>\n\n                        <div class="arch-section">\n                            <h4>Serverless Operations</h4>\n                            <div class="workflow-step">1. Code packaged as container images in ECR</div>\n                            <div class="workflow-step">2. Fargate launches tasks without managing servers</div>\n                            <div class="workflow-step">3. Auto-scaling responds to demand in real-time</div>\n                            <div class="workflow-step">4. Pay only for compute time used by containers</div>\n                            <div class="workflow-step">5. Zero infrastructure management required</div>\n                            <div class="workflow-step">6. Built-in security and compliance controls</div>\n                        </div>\n\n                        <div class="benefits-list">\n                            <h5>Serverless Advantages</h5>\n                            <ul>\n                                <li>Zero server management overhead</li>\n                                <li>Pay-per-use pricing model</li>\n                                <li>Instant scaling from zero</li>\n                                <li>Built-in fault tolerance</li>\n                                <li>Focus on code, not infrastructure</li>\n                            </ul>\n                        </div>\n\n                        <div class="cost-estimate">\n                            <div class="cost-label">Estimated Monthly Cost</div>\n                            <div class="cost-value">$14,200 - $28,500</div>\n                        </div>`;break;case"parallelcluster":legendHTML=`\n                        <div class="legend-section">\n                            <h4>HPC Cluster</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #9c27b0, #6a1b9a);"></div>\n                                <span>ParallelCluster Head Node</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff9500, #ff6b35);"></div>\n                                <span>GPU Compute Nodes</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #00d4aa, #0080ff);"></div>\n                                <span>CPU Compute Nodes</span>\n                            </div>\n                        </div>\n                        <div class="legend-section">\n                            <h4>Scheduling & Storage</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff6b35, #ff4757);"></div>\n                                <span>Slurm Job Scheduler</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #9966cc, #6b46c1);"></div>\n                                <span>FSx Shared Storage</span>\n                            </div>\n                        </div>`;architectureHTML=`\n                        <div class="arch-section">\n                            <h4>Scientific Computing</h4>\n                            <ul class="component-list">\n                                <li><strong>ParallelCluster Head Node:</strong> Login node with Slurm scheduler</li>\n                                <li><strong>GPU Compute Nodes:</strong> P4d instances for AI/ML workloads</li>\n                                <li><strong>CPU Compute Nodes:</strong> Hpc6a instances for parallel computing</li>\n                                <li><strong>Slurm Scheduler:</strong> Workload manager with resource allocation</li>\n                                <li><strong>FSx Lustre Storage:</strong> High-performance shared file system</li>\n                                <li><strong>Environment Modules:</strong> Software environment management</li>\n                            </ul>\n                        </div>\n\n                        <div class="arch-section">\n                            <h4>Scientific Workflow</h4>\n                            <div class="workflow-step">1. Research jobs submitted via Slurm scheduler</div>\n                            <div class="workflow-step">2. Queue system allocates optimal resources</div>\n                            <div class="workflow-step">3. MPI jobs span multiple nodes for parallel computing</div>\n                            <div class="workflow-step">4. Shared storage accessible from all compute nodes</div>\n                            <div class="workflow-step">5. Environment modules manage software stacks</div>\n                            <div class="workflow-step">6. Job arrays enable parameter sweep studies</div>\n                        </div>\n\n                        <div class="benefits-list">\n                            <h5>Research Benefits</h5>\n                            <ul>\n                                <li>Traditional HPC workflow compatibility</li>\n                                <li>Scientific software pre-installed</li>\n                                <li>Multi-user job scheduling</li>\n                                <li>Cluster auto-scaling capabilities</li>\n                                <li>Research-optimized instance types</li>\n                            </ul>\n                        </div>\n\n                        <div class="cost-estimate">\n                            <div class="cost-label">Estimated Monthly Cost</div>\n                            <div class="cost-value">$52,500 - $95,000</div>\n                        </div>`;break;case"hybrid-multicloud":legendHTML=`\n                        <div class="legend-section">\n                            <h4>Hybrid Infrastructure</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff6b6b, #ff4757);"></div>\n                                <span>Direct Connect Gateway</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #607d8b, #455a64);"></div>\n                                <span>On-Premises Data Center</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff9500, #ff6b35);"></div>\n                                <span>AWS Outposts</span>\n                            </div>\n                        </div>\n                        <div class="legend-section">\n                            <h4>Multi-Cloud Services</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #9966cc, #6b46c1);"></div>\n                                <span>Multi-Cloud Orchestrator</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #00d4aa, #0080ff);"></div>\n                                <span>Edge Computing Nodes</span>\n                            </div>\n                        </div>`;architectureHTML=`\n                        <div class="arch-section">\n                            <h4>Hybrid Cloud Setup</h4>\n                            <ul class="component-list">\n                                <li><strong>Direct Connect Gateway:</strong> Dedicated 100Gbps network connection</li>\n                                <li><strong>On-Premises Data Center:</strong> Existing infrastructure with sensitive data</li>\n                                <li><strong>AWS Outposts:</strong> AWS hardware in your data center</li>\n                                <li><strong>Multi-Cloud Orchestrator:</strong> Kubernetes federation across clouds</li>\n                                <li><strong>Edge Computing Nodes:</strong> Wavelength zones for low latency</li>\n                                <li><strong>Global Load Balancer:</strong> CloudFront with multi-origin support</li>\n                            </ul>\n                        </div>\n\n                        <div class="arch-section">\n                            <h4>Hybrid Orchestration</h4>\n                            <div class="workflow-step">1. Sensitive data remains on-premises for compliance</div>\n                            <div class="workflow-step">2. Training workloads burst to AWS when needed</div>\n                            <div class="workflow-step">3. Outposts provide AWS services locally</div>\n                            <div class="workflow-step">4. Edge nodes serve models with ultra-low latency</div>\n                            <div class="workflow-step">5. Global orchestrator manages workload placement</div>\n                            <div class="workflow-step">6. Cross-cloud data synchronization and backup</div>\n                        </div>\n\n                        <div class="benefits-list">\n                            <h5>Hybrid Advantages</h5>\n                            <ul>\n                                <li>Data sovereignty and compliance</li>\n                                <li>Burst capacity to cloud</li>\n                                <li>Disaster recovery across locations</li>\n                                <li>Optimize for latency and cost</li>\n                                <li>Gradual cloud migration path</li>\n                            </ul>\n                        </div>\n\n                        <div class="cost-estimate">\n                            <div class="cost-label">Estimated Monthly Cost</div>\n                            <div class="cost-value">$31,800 - $58,000</div>\n                        </div>`;break;case"edge-federated":legendHTML=`\n                        <div class="legend-section">\n                            <h4>Federated Learning</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #e91e63, #ad1457);"></div>\n                                <span>Federated Aggregator</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff9500, #ff6b35);"></div>\n                                <span>Mobile Edge Devices</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #00d4aa, #0080ff);"></div>\n                                <span>Hospital Edge Nodes</span>\n                            </div>\n                        </div>\n                        <div class="legend-section">\n                            <h4>Privacy & Security</h4>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #9966cc, #6b46c1);"></div>\n                                <span>Privacy Coordinator</span>\n                            </div>\n                            <div class="legend-item">\n                                <div class="legend-color" style="background: linear-gradient(45deg, #ff6b35, #ff4757);"></div>\n                                <span>Differential Privacy Engine</span>\n                            </div>\n                        </div>`;architectureHTML=`\n                        <div class="arch-section">\n                            <h4>Federated Components</h4>\n                            <ul class="component-list">\n                                <li><strong>Federated Aggregator:</strong> Central server coordinating learning rounds</li>\n                                <li><strong>Mobile Edge Devices:</strong> Smartphones and IoT devices for local training</li>\n                                <li><strong>Hospital Edge Nodes:</strong> Healthcare institutions with private data</li>\n                                <li><strong>Privacy Coordinator:</strong> Ensures compliance with privacy regulations</li>\n                                <li><strong>Differential Privacy Engine:</strong> Adds noise to protect individual privacy</li>\n                                <li><strong>Secure Communication Hub:</strong> Encrypted model exchange protocols</li>\n                            </ul>\n                        </div>\n\n                        <div class="arch-section">\n                            <h4>Federated Learning Process</h4>\n                            <div class="workflow-step">1. Global model distributed to participating edge devices</div>\n                            <div class="workflow-step">2. Local training on private data at each location</div>\n                            <div class="workflow-step">3. Model updates encrypted and sent to aggregator</div>\n                            <div class="workflow-step">4. Differential privacy applied to protect individuals</div>\n                            <div class="workflow-step">5. Updates aggregated without accessing raw data</div>\n                            <div class="workflow-step">6. Improved global model distributed for next round</div>\n                        </div>\n\n                        <div class="benefits-list">\n                            <h5>Privacy Benefits</h5>\n                            <ul>\n                                <li>Data never leaves source location</li>\n                                <li>Mathematical privacy guarantees</li>\n                                <li>Compliance with GDPR/HIPAA</li>\n                                <li>Collective intelligence without sharing</li>\n                                <li>Resilient to device failures</li>\n                            </ul>\n                        </div>\n\n                        <div class="cost-estimate">\n                            <div class="cost-label">Estimated Monthly Cost</div>\n                            <div class="cost-value">$8,500 - $18,000</div>\n                        </div>`;break;default:legendHTML=`\n                        <div class="legend-section">\n                            <h4>Select a template above to see architectural details</h4>\n                        </div>`;architectureHTML=`\n                        <div class="arch-section">\n                            <h4>Getting Started</h4>\n                            <p>Choose a deployment template from the dropdown menu to explore different AWS GenAI LLM training architectures.</p>\n                        </div>`}architectureContent.innerHTML=architectureHTML}getMousePos(e){const rect=this.canvas.getBoundingClientRect();return{x:e.clientX-rect.left,y:e.clientY-rect.top}}getServiceAtPosition(x,y){for(let service of this.services){const dx=x-service.x;const dy=y-service.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<=service.radius){return service}}return null}handleMouseDown(e){const mousePos=this.getMousePos(e);const service=this.getServiceAtPosition(mousePos.x,mousePos.y);if(service){this.isDragging=true;this.draggedService=service;this.lastMousePos=mousePos;this.canvasContainer.classList.add("dragging");this.hideTooltip();this.draggingIndicator.textContent=`Moving: ${service.name}`;this.draggingIndicator.style.display="block";this.draggingIndicator.style.left=mousePos.x+10+"px";this.draggingIndicator.style.top=mousePos.y-10+"px"}}handleMouseMove(e){const mousePos=this.getMousePos(e);this.mousePos=mousePos;if(this.isDragging&&this.draggedService){const dx=mousePos.x-this.lastMousePos.x;const dy=mousePos.y-this.lastMousePos.y;this.draggedService.x+=dx;this.draggedService.y+=dy;const margin=this.draggedService.radius+15;this.draggedService.x=Math.max(margin,Math.min(this.canvas.width/2-margin,this.draggedService.x));this.draggedService.y=Math.max(margin,Math.min(this.canvas.height/2-margin,this.draggedService.y));this.lastMousePos=mousePos;this.draggingIndicator.style.left=mousePos.x+10+"px";this.draggingIndicator.style.top=mousePos.y-10+"px"}else{const service=this.getServiceAtPosition(mousePos.x,mousePos.y);if(service){this.showTooltip(service,mousePos)}else{this.hideTooltip()}}}handleMouseUp(e){if(this.isDragging){this.isDragging=false;this.draggedService=null;this.canvasContainer.classList.remove("dragging");this.draggingIndicator.style.display="none"}}handleMouseLeave(e){this.hideTooltip();if(this.isDragging){this.handleMouseUp(e)}}showTooltip(service,mousePos){const tooltip=this.tooltip;const connections=this.communications.filter((c=>c.fromService===service||c.toService===service));const uptimeHours=((Date.now()-service.launchTime)/(1e3*60*60)).toFixed(1);tooltip.innerHTML=`\n                <h4>${service.name}</h4>\n                <div class="tooltip-section">\n                    <div class="tooltip-label">AWS Service:</div>\n                    <span class="aws-service-badge service-${service.awsService.toLowerCase()}">${service.awsService}</span>\n                </div>\n                <div class="tooltip-section">\n                    <div class="tooltip-label">Instance Type:</div>\n                    ${service.instanceType} (${service.vCPUs} vCPUs, ${service.memory} GB RAM)\n                </div>\n                <div class="tooltip-section">\n                    <div class="tooltip-label">Performance:</div>\n                    Utilization: ${service.utilization}%<br>\n                    Throughput: ${service.throughput}<br>\n                    Latency: ${service.latency}ms\n                </div>\n                <div class="tooltip-section">\n                    <div class="tooltip-label">Reliability:</div>\n                    Health: ${service.healthStatus}<br>\n                    Uptime: ${uptimeHours}h<br>\n                    SLA: ${service.slaTarget}%\n                </div>\n                <div class="tooltip-section">\n                    <div class="tooltip-label">Cost:</div>\n                    ${service.costPerHour}/hour<br>\n                    Spot: ${service.isSpot?"Yes":"No"}\n                </div>\n                <div class="tooltip-section">\n                    <div class="tooltip-label">Network:</div>\n                    Active Connections: ${connections.length}<br>\n                    AZ: ${service.availabilityZone}\n                </div>\n            `;tooltip.style.display="block";tooltip.style.left=Math.min(mousePos.x+15,window.innerWidth-340)+"px";tooltip.style.top=Math.max(10,mousePos.y-10)+"px"}hideTooltip(){this.tooltip.style.display="none"}drawService(service){const{x:x,y:y,radius:radius,gradient:gradient,activity:activity,pulse:pulse,organelles:organelles,membrane:membrane}=service;if(this.draggedService===service){this.ctx.strokeStyle="#ffff00";this.ctx.lineWidth=4;this.ctx.setLineDash([8,4]);this.ctx.beginPath();this.ctx.arc(x,y,radius+15,0,Math.PI*2);this.ctx.stroke();this.ctx.setLineDash([])}const glowRadius=radius+20+Math.sin(pulse)*8;const membraneGradient=this.ctx.createRadialGradient(x,y,radius*.7,x,y,glowRadius);membraneGradient.addColorStop(0,`${gradient[0]}50`);membraneGradient.addColorStop(.7,`${gradient[0]}25`);membraneGradient.addColorStop(1,"transparent");this.ctx.fillStyle=membraneGradient;this.ctx.fillRect(x-glowRadius,y-glowRadius,glowRadius*2,glowRadius*2);const serviceGradient=this.ctx.createRadialGradient(x-radius*.4,y-radius*.4,0,x,y,radius);serviceGradient.addColorStop(0,gradient[0]+"DD");serviceGradient.addColorStop(.6,gradient[1]+"BB");serviceGradient.addColorStop(1,gradient[1]+"77");this.ctx.fillStyle=serviceGradient;this.ctx.beginPath();this.ctx.arc(x,y,radius,0,Math.PI*2);this.ctx.fill();this.ctx.strokeStyle=gradient[0]+"EE";this.ctx.lineWidth=membrane.thickness;this.ctx.stroke();const reliabilityColor=service.reliabilityScore>99?"#00ff88":service.reliabilityScore>95?"#ffa502":"#ff4757";this.ctx.strokeStyle=reliabilityColor+"99";this.ctx.lineWidth=3;this.ctx.beginPath();this.ctx.arc(x,y,radius+10,0,Math.PI*2);this.ctx.stroke();organelles.forEach((org=>{org.angle+=org.speed*.008*this.animationSpeed;const orgX=x+Math.cos(org.angle)*(radius*.4)+org.x*.4;const orgY=y+Math.sin(org.angle)*(radius*.4)+org.y*.4;this.ctx.fillStyle=org.color+"99";this.ctx.beginPath();this.ctx.arc(orgX,orgY,org.radius,0,Math.PI*2);this.ctx.fill();this.ctx.fillStyle=org.color+"CC";this.ctx.beginPath();this.ctx.arc(orgX-1,orgY-1,org.radius*.7,0,Math.PI*2);this.ctx.fill()}));const coreGradient=this.ctx.createRadialGradient(x,y,0,x,y,18);coreGradient.addColorStop(0,"#ffffff99");coreGradient.addColorStop(.4,gradient[0]+"77");coreGradient.addColorStop(1,gradient[1]+"55");this.ctx.fillStyle=coreGradient;this.ctx.beginPath();this.ctx.arc(x,y,18,0,Math.PI*2);this.ctx.fill();if(activity>0){const activityRadius=radius+25+activity*20;this.ctx.strokeStyle=gradient[0]+Math.floor(activity*255).toString(16).padStart(2,"0");this.ctx.lineWidth=4;this.ctx.beginPath();this.ctx.arc(x,y,activityRadius,0,Math.PI*2);this.ctx.stroke()}this.ctx.fillStyle="#ff9500";this.ctx.font="bold 9px Arial";this.ctx.textAlign="center";this.ctx.fillText(service.awsService,x,y-radius-45);this.ctx.fillStyle="#ffffff";this.ctx.font="bold 11px Arial";this.ctx.fillText(service.name,x,y+radius+18);this.ctx.fillStyle="#a0a0a0";this.ctx.font="8px Arial";this.ctx.fillText(service.instanceType,x,y+radius+32);const barWidth=40;const barHeight=4;const barX=x-barWidth/2;const barY=y+radius+40;this.ctx.fillStyle="#333333";this.ctx.fillRect(barX,barY,barWidth,barHeight);const utilizationColor=service.utilization>80?"#ff4757":service.utilization>60?"#ffa502":"#00ff88";this.ctx.fillStyle=utilizationColor;this.ctx.fillRect(barX,barY,barWidth*service.utilization/100,barHeight);const statusIcon=service.healthStatus==="Healthy"?"üü¢":service.healthStatus==="Warning"?"üü°":"üî¥";this.ctx.font="10px Arial";this.ctx.fillText(statusIcon,x+radius-8,y-radius+12);if(service.isSpot){this.ctx.fillStyle="#ffa502";this.ctx.font="bold 8px Arial";this.ctx.fillText("SPOT",x-radius+8,y-radius+12)}this.ctx.fillStyle="#00ff88";this.ctx.font="7px Arial";this.ctx.fillText(`${service.costPerHour}/h`,x,y+radius+55)}drawCommunication(comm){const{fromService:fromService,toService:toService,progress:progress,type:type,particles:particles,dataSize:dataSize}=comm;if(!fromService||!toService)return;const dx=toService.x-fromService.x;const dy=toService.y-fromService.y;const distance=Math.sqrt(dx*dx+dy*dy);const protocolColors=this.getTemplateColors();const lineColor=protocolColors[type]||"#ffffff";const lineWidth=type==="model-sync"?4:type==="data-transfer"?3:2;this.ctx.strokeStyle=`${lineColor}${Math.floor((.4+Math.sin(progress*Math.PI)*.4)*255).toString(16).padStart(2,"0")}`;this.ctx.lineWidth=lineWidth;if(type==="monitoring"){this.ctx.setLineDash([5,10])}else if(type==="checkpoint"){this.ctx.setLineDash([15,5])}else{this.ctx.setLineDash([])}this.ctx.beginPath();this.ctx.moveTo(fromService.x,fromService.y);this.ctx.lineTo(toService.x,toService.y);this.ctx.stroke();this.ctx.setLineDash([]);const arrowSize=10;const arrowX=fromService.x+dx*.75;const arrowY=fromService.y+dy*.75;const angle=Math.atan2(dy,dx);this.ctx.fillStyle=lineColor;this.ctx.beginPath();this.ctx.moveTo(arrowX,arrowY);this.ctx.lineTo(arrowX-arrowSize*Math.cos(angle-Math.PI/5),arrowY-arrowSize*Math.sin(angle-Math.PI/5));this.ctx.lineTo(arrowX-arrowSize*Math.cos(angle+Math.PI/5),arrowY-arrowSize*Math.sin(angle+Math.PI/5));this.ctx.closePath();this.ctx.fill();const labelX=fromService.x+dx*.5;const labelY=fromService.y+dy*.5;const label=type.toUpperCase().replace("-","_");this.ctx.font="bold 9px Arial";const labelMetrics=this.ctx.measureText(label);const labelWidth=labelMetrics.width+8;const labelHeight=16;this.ctx.fillStyle="rgba(0, 0, 0, 0.85)";this.ctx.fillRect(labelX-labelWidth/2,labelY-labelHeight/2,labelWidth,labelHeight);this.ctx.strokeStyle=lineColor+"CC";this.ctx.lineWidth=1;this.ctx.strokeRect(labelX-labelWidth/2,labelY-labelHeight/2,labelWidth,labelHeight);this.ctx.fillStyle=lineColor;this.ctx.textAlign="center";this.ctx.textBaseline="middle";this.ctx.fillText(label,labelX,labelY);if(dataSize){this.ctx.font="7px Arial";this.ctx.fillStyle="#a0a0a0";this.ctx.fillText(dataSize,labelX,labelY+12)}particles.forEach(((particle,index)=>{const particleProgress=(progress+index*.12)%1;const particleX=fromService.x+dx*particleProgress;const particleY=fromService.y+dy*particleProgress;for(let i=0;i<5;i++){const trailProgress=Math.max(0,particleProgress-i*.06);const trailX=fromService.x+dx*trailProgress;const trailY=fromService.y+dy*trailProgress;const alpha=(5-i)/5*.9;this.ctx.fillStyle=`${lineColor}${Math.floor(alpha*255).toString(16).padStart(2,"0")}`;this.ctx.beginPath();this.ctx.arc(trailX,trailY,5-i*.8,0,Math.PI*2);this.ctx.fill()}const particleGradient=this.ctx.createRadialGradient(particleX,particleY,0,particleX,particleY,12);particleGradient.addColorStop(0,lineColor);particleGradient.addColorStop(.4,lineColor+"BB");particleGradient.addColorStop(1,"transparent");this.ctx.fillStyle=particleGradient;this.ctx.beginPath();this.ctx.arc(particleX,particleY,12,0,Math.PI*2);this.ctx.fill()}));if(distance>200){const badgeX=fromService.x+dx*.2;const badgeY=fromService.y+dy*.2;const protocolNames={"data-transfer":"TCP","model-sync":"gRPC","control-signal":"HTTP",monitoring:"UDP",checkpoint:"S3 API",inference:"REST",kubernetes:"K8s API","batch-job":"Batch API",federated:"FL Proto","hybrid-sync":"VPN","privacy-check":"TLS"};const protocol=protocolNames[type]||"TCP";this.ctx.font="8px Arial";this.ctx.fillStyle=lineColor+"AA";this.ctx.textAlign="center";this.ctx.fillText(protocol,badgeX,badgeY-8)}}getTemplateColors(){const baseColors={"data-transfer":"#00ff88","model-sync":"#0080ff","control-signal":"#ff9500",checkpoint:"#9966cc",monitoring:"#ff6b6b",inference:"#00d4aa",preprocessing:"#ffa502",kubernetes:"#326ce5",federated:"#e91e63","batch-job":"#ff6b6b","spark-task":"#4caf50","container-deploy":"#ff8a65","hpc-job":"#9c27b0","hybrid-sync":"#607d8b","privacy-check":"#e91e63"};return baseColors}animate(){if(!this.isPaused){const gradient=this.ctx.createLinearGradient(0,0,this.canvas.width/2,this.canvas.height/2);gradient.addColorStop(0,"#0a0a0a");gradient.addColorStop(.3,"#1a1a2e");gradient.addColorStop(.7,"#16213e");gradient.addColorStop(1,"#2c1810");this.ctx.fillStyle=gradient;this.ctx.fillRect(0,0,this.canvas.width/2,this.canvas.height/2);this.services.forEach((service=>{service.pulse+=.04*this.animationSpeed;service.activity=Math.max(0,service.activity-.006);service.radius=service.baseRadius+Math.sin(service.pulse)*4;this.drawService(service)}));this.communications.forEach((comm=>{comm.progress+=comm.speed*this.animationSpeed;if(comm.progress>=1){comm.progress=0;comm.toService.activity=Math.min(1,comm.toService.activity+.4)}this.drawCommunication(comm)}));if(this.isTraining){this.trainingProgress+=.1*this.animationSpeed;if(this.trainingProgress>=100){this.trainingProgress=100;this.isTraining=false;document.getElementById("trainingProgress").style.display="none"}const progressElement=document.getElementById("progressFill");const progressText=document.getElementById("progressText");if(progressElement&&progressText){progressElement.style.width=this.trainingProgress+"%";progressText.textContent=Math.round(this.trainingProgress)+"%"}}}requestAnimationFrame((()=>this.animate()))}logToConsole(message,type="info",serviceId=null){if(!this.consoleVisible)return;const consoleLogs=document.getElementById("consoleLogs");if(!consoleLogs)return;const timestamp=(new Date).toLocaleTimeString();const logEntry=document.createElement("div");logEntry.className=`log-entry log-${type}`;let formattedMessage=message;if(serviceId){const service=this.services.find((s=>s.id===serviceId));if(service){formattedMessage=`[${service.name}] ${message}`}}logEntry.innerHTML=`\n        <span class="log-timestamp">[${timestamp}]</span>\n        <span>${formattedMessage}</span>\n    `;consoleLogs.appendChild(logEntry);while(consoleLogs.children.length>this.maxConsoleEntries){consoleLogs.removeChild(consoleLogs.firstChild)}consoleLogs.scrollTop=consoleLogs.scrollHeight}addCommunication(type,fromId=null,toId=null){if(this.services.length<2)return;let fromService,toService;if(fromId&&toId){fromService=this.services.find((s=>s.id===fromId));toService=this.services.find((s=>s.id===toId))}else{const patterns=this.getCommunicationPatterns();const pattern=patterns[type];if(pattern){const fromIds=pattern.from.filter((id=>this.services.find((s=>s.id===id))));const toIds=pattern.to.filter((id=>this.services.find((s=>s.id===id))));if(fromIds.length>0&&toIds.length>0){fromService=this.services.find((s=>s.id===fromIds[Math.floor(Math.random()*fromIds.length)]));toService=this.services.find((s=>s.id===toIds[Math.floor(Math.random()*toIds.length)]))}}}if(!fromService||!toService||fromService===toService){fromService=this.services[Math.floor(Math.random()*this.services.length)];toService=this.services[Math.floor(Math.random()*this.services.length)];if(fromService===toService)return}const communication={id:Date.now()+Math.random(),fromService:fromService,toService:toService,type:type,progress:0,speed:this.getCommunicationSpeed(type),particles:Array(this.getParticleCount(type)).fill().map(((_,i)=>({id:i}))),startTime:Date.now(),dataSize:this.getDataSize(type)};this.communications.push(communication);const typeMessages={"data-transfer":`üì§ Transferring ${communication.dataSize} to`,"model-sync":`üîÑ Synchronizing model weights with`,"control-signal":`üì° Sending control signals to`,checkpoint:`üíæ Saving checkpoint to`,monitoring:`üìä Sending metrics to`,inference:`üß† Processing inference request to`,preprocessing:`üîß Preprocessing data for`,kubernetes:`‚ò∏Ô∏è Orchestrating pods on`,"batch-job":`üöÄ Submitting batch job to`,"spark-task":`‚ö° Distributing Spark task to`,"container-deploy":`üì¶ Deploying container to`,"hpc-job":`üî¨ Scheduling HPC job on`,"hybrid-sync":`üåê Cross-cloud sync with`,federated:`ü§ù Federated learning update to`,"privacy-check":`üîí Privacy validation for`};const message=typeMessages[type]||`üì° Communication to`;this.logToConsole(`${message} ${toService.name}`,"data",fromService.id);fromService.activity=Math.min(1,fromService.activity+.5);toService.activity=Math.min(1,toService.activity+.4);fromService.utilization=Math.min(100,fromService.utilization+Math.random()*5);if(fromService.utilization>85){this.logToConsole(`High utilization: ${Math.round(fromService.utilization)}%`,"warning",fromService.id)}setTimeout((()=>{this.communications=this.communications.filter((c=>c.id!==communication.id));this.logToConsole(`‚úÖ ${type.toUpperCase()} completed`,"success",toService.id)}),8e3)}initializeBaseCosts(){this.baseCosts={};this.services.forEach((service=>{this.baseCosts[service.id]=service.costPerHour}))}updateCostTracker(){const costBreakdown=document.getElementById("costBreakdown");if(!costBreakdown)return;let totalHourlyCost=0;let totalMonthlyCost=0;let spotSavings=0;let scaleOutCost=0;this.services.forEach((service=>{totalHourlyCost+=service.costPerHour;if(service.isSpot){spotSavings+=service.costPerHour*.7}}));this.scaledInstances.forEach((instance=>{scaleOutCost+=instance.costPerHour}));totalMonthlyCost=totalHourlyCost*24*30;const scaledMonthlyCost=scaleOutCost*24*30;costBreakdown.innerHTML=`\n        <div class="cost-row">\n            <span class="cost-label">Base Infrastructure:</span>\n            <span class="cost-value">$${Math.round(totalHourlyCost-scaleOutCost)}/hr</span>\n        </div>\n        <div class="cost-row">\n            <span class="cost-label">Scaled Instances:</span>\n            <span class="cost-value">$${Math.round(scaleOutCost)}/hr</span>\n        </div>\n        <div class="cost-row">\n            <span class="cost-label">Spot Savings:</span>\n            <span class="cost-value cost-savings">-$${Math.round(spotSavings)}/hr</span>\n        </div>\n        <div class="cost-row cost-total">\n            <span class="cost-label">Total Hourly:</span>\n            <span class="cost-value">$${Math.round(totalHourlyCost)}/hr</span>\n        </div>\n        <div class="cost-row">\n            <span class="cost-label">Monthly Projection:</span>\n            <span class="cost-value">$${Math.round(totalMonthlyCost).toLocaleString()}</span>\n        </div>\n        ${scaledMonthlyCost>0?`\n        <div class="cost-row">\n            <span class="cost-label">Scale-out Monthly:</span>\n            <span class="cost-value">+$${Math.round(scaledMonthlyCost).toLocaleString()}</span>\n        </div>`:""}\n    `}getCommunicationPatterns(){const patterns={standard:{"data-transfer":{from:["S3_DATALAKE"],to:["SAGEMAKER_TRAINING","EC2_TRAINING_NODES","LAMBDA_PREPROCESSING"]},"model-sync":{from:["SAGEMAKER_TRAINING","EC2_TRAINING_NODES"],to:["ECS_SERVING","BEDROCK_MODELS"]},"control-signal":{from:["CLOUDWATCH_MONITORING"],to:["SAGEMAKER_TRAINING","EC2_TRAINING_NODES"]},checkpoint:{from:["SAGEMAKER_TRAINING","EC2_TRAINING_NODES"],to:["S3_DATALAKE"]},monitoring:{from:["SAGEMAKER_TRAINING","EC2_TRAINING_NODES","ECS_SERVING"],to:["CLOUDWATCH_MONITORING"]},inference:{from:["ECS_SERVING","BEDROCK_MODELS"],to:["LAMBDA_PREPROCESSING"]},preprocessing:{from:["LAMBDA_PREPROCESSING"],to:["SAGEMAKER_TRAINING","EC2_TRAINING_NODES"]}},"eks-kubernetes":{kubernetes:{from:["EKS_CONTROL_PLANE"],to:["EKS_WORKER_GROUP_1","EKS_WORKER_GROUP_2"]},"data-transfer":{from:["EFS_STORAGE"],to:["EKS_WORKER_GROUP_1","EKS_WORKER_GROUP_2"]},"model-sync":{from:["EKS_WORKER_GROUP_1","EKS_WORKER_GROUP_2"],to:["ECR_REGISTRY"]},monitoring:{from:["EKS_WORKER_GROUP_1","EKS_WORKER_GROUP_2"],to:["EKS_CONTROL_PLANE"]},inference:{from:["ALB_LOAD_BALANCER"],to:["EKS_WORKER_GROUP_1","EKS_WORKER_GROUP_2"]}},"batch-hpc":{"batch-job":{from:["BATCH_JOB_QUEUE"],to:["HPC_CLUSTER_1","HPC_CLUSTER_2"]},"data-transfer":{from:["FSX_LUSTRE"],to:["HPC_CLUSTER_1","HPC_CLUSTER_2"]},"control-signal":{from:["BATCH_COMPUTE_ENV"],to:["BATCH_JOB_QUEUE"]},monitoring:{from:["HPC_CLUSTER_1","HPC_CLUSTER_2"],to:["BATCH_COMPUTE_ENV"]}},"emr-spark":{"spark-task":{from:["EMR_MASTER"],to:["SPARK_WORKERS","EMR_GPU_NODES"]},"data-transfer":{from:["HDFS_STORAGE"],to:["SPARK_WORKERS","EMR_GPU_NODES"]},"model-sync":{from:["EMR_GPU_NODES"],to:["HDFS_STORAGE"]},monitoring:{from:["SPARK_WORKERS","EMR_GPU_NODES"],to:["EMR_MASTER"]},preprocessing:{from:["JUPYTER_HUB"],to:["SPARK_WORKERS"]}},"fargate-serverless":{"container-deploy":{from:["FARGATE_SERVICE"],to:["TRAINING_TASKS","DATA_PROCESSING_TASKS"]},"data-transfer":{from:["DATA_PROCESSING_TASKS"],to:["TRAINING_TASKS"]},"control-signal":{from:["AUTO_SCALING_MANAGER"],to:["TRAINING_TASKS","DATA_PROCESSING_TASKS"]},monitoring:{from:["TRAINING_TASKS","DATA_PROCESSING_TASKS"],to:["CLOUDWATCH_FARGATE"]},inference:{from:["ALB_FARGATE"],to:["TRAINING_TASKS"]}},parallelcluster:{"hpc-job":{from:["SLURM_SCHEDULER"],to:["GPU_COMPUTE_NODES","CPU_COMPUTE_NODES"]},"data-transfer":{from:["FSX_SHARED_STORAGE"],to:["GPU_COMPUTE_NODES","CPU_COMPUTE_NODES"]},"control-signal":{from:["PARALLELCLUSTER_HEAD"],to:["SLURM_SCHEDULER"]},monitoring:{from:["GPU_COMPUTE_NODES","CPU_COMPUTE_NODES"],to:["ENV_MANAGER"]}},"hybrid-multicloud":{"hybrid-sync":{from:["DIRECT_CONNECT"],to:["ON_PREMISES_DC","AWS_OUTPOSTS"]},"data-transfer":{from:["ON_PREMISES_DC"],to:["AWS_OUTPOSTS"]},"model-sync":{from:["MULTI_CLOUD_ORCHESTRATOR"],to:["ON_PREMISES_DC","AWS_OUTPOSTS"]},inference:{from:["EDGE_COMPUTING"],to:["GLOBAL_LOAD_BALANCER"]},monitoring:{from:["AWS_OUTPOSTS","EDGE_COMPUTING"],to:["MULTI_CLOUD_ORCHESTRATOR"]}},"edge-federated":{federated:{from:["FEDERATED_AGGREGATOR"],to:["EDGE_CLUSTER_1","EDGE_CLUSTER_2"]},"privacy-check":{from:["PRIVACY_COORDINATOR"],to:["EDGE_CLUSTER_1","EDGE_CLUSTER_2"]},"model-sync":{from:["EDGE_CLUSTER_1","EDGE_CLUSTER_2"],to:["FEDERATED_AGGREGATOR"]},"data-transfer":{from:["DIFFERENTIAL_PRIVACY"],to:["FEDERATED_AGGREGATOR"]},monitoring:{from:["SECURE_COMM_HUB"],to:["FEDERATED_AGGREGATOR"]}}};return patterns[this.currentTemplate]||patterns["standard"]}getCommunicationSpeed(type){const speeds={"data-transfer":.008,"model-sync":.006,"control-signal":.02,checkpoint:.004,monitoring:.015,inference:.018,preprocessing:.012,kubernetes:.015,federated:.005,"batch-job":.01,"spark-task":.012,"container-deploy":.014,"hpc-job":.008,"hybrid-sync":.006,"privacy-check":.02};return speeds[type]||.01}getParticleCount(type){const counts={"data-transfer":6,"model-sync":8,"control-signal":2,checkpoint:4,monitoring:3,inference:4,preprocessing:5,kubernetes:4,federated:3,"batch-job":5,"spark-task":6,"container-deploy":4,"hpc-job":7,"hybrid-sync":5,"privacy-check":2};return counts[type]||3}getDataSize(type){const sizes={"data-transfer":"2.3 GB","model-sync":"850 MB","control-signal":"15 KB",checkpoint:"1.2 GB",monitoring:"500 KB",inference:"125 MB",preprocessing:"450 MB",kubernetes:"25 MB",federated:"5 MB","batch-job":"1.8 GB","spark-task":"650 MB","container-deploy":"200 MB","hpc-job":"3.2 GB","hybrid-sync":"900 MB","privacy-check":"10 KB"};return sizes[type]||"100 MB"}createFloatingParticles(){const particlesContainer=document.getElementById("particles");setInterval((()=>{if(this.isPaused)return;const particle=document.createElement("div");particle.className="particle";particle.style.left=Math.random()*100+"%";particle.style.animationDuration=10+Math.random()*6+"s";particle.style.animationDelay=Math.random()*3+"s";particlesContainer.appendChild(particle);setTimeout((()=>{particle.remove()}),16e3)}),4e3)}updateMetrics(){const templateMultipliers={standard:{cost:1,performance:1},"eks-kubernetes":{cost:1.2,performance:1.15},"batch-hpc":{cost:1.5,performance:1.8},"emr-spark":{cost:1.3,performance:1.4},"fargate-serverless":{cost:.8,performance:.9},parallelcluster:{cost:1.6,performance:2},"hybrid-multicloud":{cost:1.4,performance:1.1},"edge-federated":{cost:.7,performance:.6}};const multiplier=templateMultipliers[this.currentTemplate]||{cost:1,performance:1};this.awsMetrics.gpuUtilization=Math.max(40,Math.min(95,this.awsMetrics.gpuUtilization+(Math.random()-.5)*10));this.awsMetrics.trainingLoss=Math.max(1.2,this.awsMetrics.trainingLoss-Math.random()*.01);const activeServices=this.services.filter((s=>s.activity>.1)).length;this.awsMetrics.trainingInstances=activeServices;const baseThroughput=1200*multiplier.performance;this.awsMetrics.throughput=`${(baseThroughput+Math.random()*200).toFixed(0)} tokens/sec`;document.getElementById("trainingInstances").textContent=this.awsMetrics.trainingInstances;document.getElementById("gpuUtilization").textContent=Math.round(this.awsMetrics.gpuUtilization)+"%";document.getElementById("modelParams").textContent=this.awsMetrics.modelParams;document.getElementById("trainingLoss").textContent=this.awsMetrics.trainingLoss.toFixed(3);document.getElementById("throughput").textContent=this.awsMetrics.throughput;document.getElementById("dataProcessed").textContent=this.awsMetrics.dataProcessed;document.getElementById("networkIO").textContent=this.awsMetrics.networkIO;const avgReliability=this.services.reduce(((sum,s)=>sum+s.reliabilityScore),0)/this.services.length;document.getElementById("reliabilityScore").textContent=avgReliability.toFixed(1)+"%";const totalCost=Math.round(this.services.reduce(((sum,s)=>sum+s.costPerHour),0)*multiplier.cost);document.getElementById("costPerHour").textContent="$"+totalCost}startMetricsUpdater(){setInterval((()=>{this.updateMetrics()}),2e3)}createRipple(x,y,color){const ripple={x:x,y:y,color:color,radius:0,maxRadius:150,opacity:1,growing:true};const animateRipple=()=>{if(ripple.growing){ripple.radius+=5;ripple.opacity-=.02;if(ripple.radius>=ripple.maxRadius||ripple.opacity<=0){return}this.drawRipple(ripple);requestAnimationFrame(animateRipple)}};animateRipple()}drawRipple(ripple){this.ctx.strokeStyle=`${ripple.color}${Math.floor(ripple.opacity*255).toString(16).padStart(2,"0")}`;this.ctx.lineWidth=4;this.ctx.beginPath();this.ctx.arc(ripple.x,ripple.y,ripple.radius,0,Math.PI*2);this.ctx.stroke()}}class DraggablePanelManager{constructor(){this.draggedElement=null;this.offset={x:0,y:0};this.isDragging=false;this.panels=[];this.initializeDraggablePanels();this.setupEventListeners()}initializeDraggablePanels(){const panelConfigs=[{id:"controls",selector:".controls",title:"Control Panel",icon:"üéõÔ∏è",handleSelector:"h4:first-child"},{id:"metricsPanel",selector:".metrics-panel",title:"System Metrics",icon:"üìä",handleSelector:"h3"},{id:"architectureDetails",selector:".architecture-details",title:"Architecture Details",icon:"üèóÔ∏è",handleSelector:"h3"},{id:"legend",selector:".legend",title:"Components Legend",icon:"üó∫Ô∏è",handleSelector:"h3"},{id:"liveConsole",selector:".live-console",title:"Live Console",icon:"üñ•Ô∏è",handleSelector:".console-header span"},{id:"costTracker",selector:".cost-tracker",title:"Cost Tracker",icon:"üí∞",handleSelector:".cost-header"},{id:"trainingProgress",selector:".training-progress",title:"Training Progress",icon:"üìà",handleSelector:"div:first-child"}];panelConfigs.forEach((config=>{const panel=document.querySelector(config.selector);if(panel){this.makePanelDraggable(panel,config);this.panels.push({element:panel,config:config})}}))}makePanelDraggable(panel,config){panel.classList.add("draggable-panel");let dragHandle=panel.querySelector(config.handleSelector);if(dragHandle){dragHandle.classList.add("drag-handle");if(!dragHandle.textContent.includes(config.icon)){dragHandle.innerHTML=`${config.icon} ${dragHandle.innerHTML}`}}else{dragHandle=document.createElement("div");dragHandle.className="drag-handle";dragHandle.innerHTML=`${config.icon} ${config.title}`;panel.insertBefore(dragHandle,panel.firstChild)}const computedStyle=window.getComputedStyle(panel);panel.dataset.originalTop=computedStyle.top;panel.dataset.originalLeft=computedStyle.left;panel.dataset.originalRight=computedStyle.right;panel.dataset.originalBottom=computedStyle.bottom;dragHandle.addEventListener("mousedown",(e=>this.startDrag(e,panel)));dragHandle.addEventListener("touchstart",(e=>this.startDrag(e,panel)),{passive:false});dragHandle.addEventListener("dblclick",(e=>this.toggleMinimize(panel)));dragHandle.addEventListener("contextmenu",(e=>this.showContextMenu(e,panel,config)))}startDrag(e,panel){e.preventDefault();e.stopPropagation();this.isDragging=true;this.draggedElement=panel;const clientX=e.clientX||e.touches&&e.touches[0].clientX;const clientY=e.clientY||e.touches&&e.touches[0].clientY;const rect=panel.getBoundingClientRect();this.offset.x=clientX-rect.left;this.offset.y=clientY-rect.top;panel.classList.add("dragging");panel.style.position="absolute";panel.style.left=rect.left+"px";panel.style.top=rect.top+"px";panel.style.right="auto";panel.style.bottom="auto";this.createDragIndicator(panel);document.body.style.userSelect="none";console.log(`üéØ Started dragging: ${panel.querySelector(".drag-handle").textContent}`)}setupEventListeners(){document.addEventListener("mousemove",(e=>this.onDrag(e)));document.addEventListener("mouseup",(e=>this.endDrag(e)));document.addEventListener("touchmove",(e=>this.onDrag(e)),{passive:false});document.addEventListener("touchend",(e=>this.endDrag(e)));document.addEventListener("dragstart",(e=>e.preventDefault()))}onDrag(e){if(!this.isDragging||!this.draggedElement)return;e.preventDefault();const clientX=e.clientX||e.touches&&e.touches[0].clientX;const clientY=e.clientY||e.touches&&e.touches[0].clientY;const newX=clientX-this.offset.x;const newY=clientY-this.offset.y;const maxX=window.innerWidth-this.draggedElement.offsetWidth;const maxY=window.innerHeight-this.draggedElement.offsetHeight;const constrainedX=Math.max(0,Math.min(newX,maxX));const constrainedY=Math.max(0,Math.min(newY,maxY));this.draggedElement.style.left=constrainedX+"px";this.draggedElement.style.top=constrainedY+"px";this.updateDragIndicator(constrainedX,constrainedY)}endDrag(e){if(!this.isDragging)return;this.isDragging=false;if(this.draggedElement){this.draggedElement.classList.remove("dragging");this.snapToGrid(this.draggedElement);console.log(`‚úÖ Finished dragging: ${this.draggedElement.querySelector(".drag-handle").textContent}`)}this.draggedElement=null;this.removeDragIndicator();document.body.style.userSelect=""}snapToGrid(element){const gridSize=20;const rect=element.getBoundingClientRect();const snappedX=Math.round(rect.left/gridSize)*gridSize;const snappedY=Math.round(rect.top/gridSize)*gridSize;element.style.left=snappedX+"px";element.style.top=snappedY+"px"}toggleMinimize(panel){const content=panel.children;const isMinimized=panel.dataset.minimized==="true";if(isMinimized){for(let i=1;i<content.length;i++){content[i].style.display=panel.dataset.originalDisplay||""}panel.dataset.minimized="false";panel.style.height=panel.dataset.originalHeight||"auto"}else{panel.dataset.originalHeight=panel.style.height||"auto";for(let i=1;i<content.length;i++){panel.dataset.originalDisplay=content[i].style.display||"";content[i].style.display="none"}panel.dataset.minimized="true";panel.style.height="auto"}}showContextMenu(e,panel,config){e.preventDefault();const existingMenu=document.querySelector(".panel-context-menu");if(existingMenu)existingMenu.remove();const menu=document.createElement("div");menu.className="panel-context-menu";menu.style.cssText=`\n            position: fixed;\n            left: ${e.clientX}px;\n            top: ${e.clientY}px;\n            background: rgba(0, 0, 0, 0.9);\n            border: 1px solid #ff9500;\n            border-radius: 8px;\n            padding: 8px 0;\n            z-index: 10000;\n            min-width: 150px;\n            font-size: 0.85rem;\n        `;const menuItems=[{text:"üìå Reset Position",action:()=>this.resetPosition(panel)},{text:panel.dataset.minimized==="true"?"üîº Restore":"üîΩ Minimize",action:()=>this.toggleMinimize(panel)},{text:"üëÅÔ∏è Toggle Visibility",action:()=>this.toggleVisibility(panel)},{text:"üìê Snap to Grid",action:()=>this.snapToGrid(panel)}];menuItems.forEach((item=>{const menuItem=document.createElement("div");menuItem.textContent=item.text;menuItem.style.cssText=`\n                padding: 8px 16px;\n                cursor: pointer;\n                color: white;\n                transition: background 0.2s ease;\n            `;menuItem.addEventListener("mouseenter",(()=>{menuItem.style.background="rgba(255, 149, 0, 0.2)"}));menuItem.addEventListener("mouseleave",(()=>{menuItem.style.background="transparent"}));menuItem.addEventListener("click",(()=>{item.action();menu.remove()}));menu.appendChild(menuItem)}));document.body.appendChild(menu);setTimeout((()=>{document.addEventListener("click",(()=>menu.remove()),{once:true})}),100)}resetPosition(panel){panel.style.position="";panel.style.left=panel.dataset.originalLeft||"";panel.style.top=panel.dataset.originalTop||"";panel.style.right=panel.dataset.originalRight||"";panel.style.bottom=panel.dataset.originalBottom||"";console.log(`üîÑ Reset position for: ${panel.querySelector(".drag-handle").textContent}`)}toggleVisibility(panel){const isHidden=panel.style.display==="none";panel.style.display=isHidden?"":"none";console.log(`üëÅÔ∏è ${isHidden?"Showed":"Hid"}: ${panel.querySelector(".drag-handle").textContent}`)}createDragIndicator(panel){const indicator=document.createElement("div");indicator.id="panel-drag-indicator";indicator.style.cssText=`\n            position: fixed;\n            background: rgba(255, 149, 0, 0.8);\n            color: white;\n            padding: 4px 12px;\n            border-radius: 6px;\n            font-size: 0.8rem;\n            z-index: 10001;\n            pointer-events: none;\n            border: 1px solid rgba(255, 149, 0, 1);\n            box-shadow: 0 4px 12px rgba(255, 149, 0, 0.4);\n        `;indicator.textContent=`Moving: ${panel.querySelector(".drag-handle").textContent.replace(/[‚ãÆüéõÔ∏èüìäüèóÔ∏èüó∫Ô∏èüñ•Ô∏èüí∞üìà]/g,"").trim()}`;document.body.appendChild(indicator)}updateDragIndicator(x,y){const indicator=document.getElementById("panel-drag-indicator");if(indicator){indicator.style.left=x+10+"px";indicator.style.top=y-10+"px"}}removeDragIndicator(){const indicator=document.getElementById("panel-drag-indicator");if(indicator)indicator.remove()}resetAllPanels(){this.panels.forEach((({element:element})=>{this.resetPosition(element);element.style.display="";if(element.dataset.minimized==="true"){this.toggleMinimize(element)}}));console.log("üîÑ Reset all panels to original positions")}minimizeAllPanels(){this.panels.forEach((({element:element})=>{if(element.dataset.minimized!=="true"){this.toggleMinimize(element)}}));console.log("üîΩ Minimized all panels")}showAllPanels(){this.panels.forEach((({element:element})=>{element.style.display="";if(element.dataset.minimized==="true"){this.toggleMinimize(element)}}));console.log("üëÅÔ∏è Showed all panels")}}let awsArchitecture;let panelManager=null;let panelsLocked=false;function changeDeploymentTemplate(){const templateSelect=document.getElementById("deploymentTemplate");const selectedTemplate=templateSelect.value;if(awsArchitecture){awsArchitecture.initializeDeploymentTemplate(selectedTemplate)}}function clearConsole(){const consoleLogs=document.getElementById("consoleLogs");if(consoleLogs){consoleLogs.innerHTML=`\n                <div class="log-entry log-system">\n                    <span class="log-timestamp">[CLEAR]</span>\n                    <span>Console cleared</span>\n                </div>\n            `}}function toggleConsole(){const console=document.getElementById("liveConsole");const btn=event.target;if(console.style.display==="none"){console.style.display="block";btn.textContent="Hide";if(awsArchitecture){awsArchitecture.consoleVisible=true}}else{console.style.display="none";btn.textContent="Show";if(awsArchitecture){awsArchitecture.consoleVisible=false}}}window.addEventListener("load",(()=>{awsArchitecture=new AWSGenAIArchitecture;setInterval((()=>{if(!awsArchitecture.isPaused&&Math.random()<.6){const template=awsArchitecture.currentTemplate;let communicationTypes=[];switch(template){case"standard":communicationTypes=[{type:"data-transfer",probability:.25},{type:"model-sync",probability:.2},{type:"monitoring",probability:.2},{type:"control-signal",probability:.15},{type:"inference",probability:.1},{type:"preprocessing",probability:.1}];break;case"eks-kubernetes":communicationTypes=[{type:"kubernetes",probability:.3},{type:"data-transfer",probability:.25},{type:"model-sync",probability:.2},{type:"monitoring",probability:.15},{type:"inference",probability:.1}];break;case"batch-hpc":communicationTypes=[{type:"batch-job",probability:.35},{type:"data-transfer",probability:.25},{type:"control-signal",probability:.2},{type:"monitoring",probability:.2}];break;case"emr-spark":communicationTypes=[{type:"spark-task",probability:.3},{type:"data-transfer",probability:.25},{type:"model-sync",probability:.2},{type:"monitoring",probability:.15},{type:"preprocessing",probability:.1}];break;case"fargate-serverless":communicationTypes=[{type:"container-deploy",probability:.3},{type:"data-transfer",probability:.2},{type:"control-signal",probability:.2},{type:"monitoring",probability:.2},{type:"inference",probability:.1}];break;case"parallelcluster":communicationTypes=[{type:"hpc-job",probability:.35},{type:"data-transfer",probability:.25},{type:"control-signal",probability:.25},{type:"monitoring",probability:.15}];break;case"hybrid-multicloud":communicationTypes=[{type:"hybrid-sync",probability:.3},{type:"data-transfer",probability:.25},{type:"model-sync",probability:.2},{type:"inference",probability:.15},{type:"monitoring",probability:.1}];break;case"edge-federated":communicationTypes=[{type:"federated",probability:.25},{type:"privacy-check",probability:.25},{type:"model-sync",probability:.2},{type:"data-transfer",probability:.15},{type:"monitoring",probability:.15}];break;default:communicationTypes=[{type:"data-transfer",probability:.25},{type:"model-sync",probability:.2},{type:"monitoring",probability:.2},{type:"control-signal",probability:.15},{type:"inference",probability:.1},{type:"preprocessing",probability:.1}]}const rand=Math.random();let cumulative=0;for(const commType of communicationTypes){cumulative+=commType.probability;if(rand<=cumulative){awsArchitecture.addCommunication(commType.type);break}}}}),1800);setInterval((()=>{if(awsArchitecture.isTraining&&Math.random()<.3){const template=awsArchitecture.currentTemplate;if(template==="standard"){awsArchitecture.addCommunication("checkpoint","SAGEMAKER_TRAINING","S3_DATALAKE");awsArchitecture.addCommunication("checkpoint","EC2_TRAINING_NODES","S3_DATALAKE")}else if(template==="eks-kubernetes"){awsArchitecture.addCommunication("model-sync","EKS_WORKER_GROUP_1","ECR_REGISTRY")}else if(template==="batch-hpc"){awsArchitecture.addCommunication("data-transfer","HPC_CLUSTER_1","FSX_LUSTRE")}}}),5e3);setTimeout((()=>{panelManager=new DraggablePanelManager;console.log("üéõÔ∏è Draggable panel manager initialized")}),1e3)}));function startTraining(){if(awsArchitecture){awsArchitecture.isTraining=true;awsArchitecture.trainingProgress=0;document.getElementById("trainingProgress").style.display="block";const template=awsArchitecture.currentTemplate;switch(template){case"standard":awsArchitecture.addCommunication("data-transfer","S3_DATALAKE","SAGEMAKER_TRAINING");awsArchitecture.addCommunication("data-transfer","S3_DATALAKE","EC2_TRAINING_NODES");awsArchitecture.addCommunication("preprocessing","LAMBDA_PREPROCESSING","SAGEMAKER_TRAINING");const trainingServices=["SAGEMAKER_TRAINING","EC2_TRAINING_NODES"];trainingServices.forEach((serviceId=>{const service=awsArchitecture.services.find((s=>s.id===serviceId));if(service){service.activity=1;service.utilization=Math.min(95,service.utilization+20)}}));break;case"eks-kubernetes":awsArchitecture.addCommunication("kubernetes","EKS_CONTROL_PLANE","EKS_WORKER_GROUP_1");awsArchitecture.addCommunication("kubernetes","EKS_CONTROL_PLANE","EKS_WORKER_GROUP_2");awsArchitecture.addCommunication("data-transfer","EFS_STORAGE","EKS_WORKER_GROUP_1");const k8sServices=["EKS_WORKER_GROUP_1","EKS_WORKER_GROUP_2"];k8sServices.forEach((serviceId=>{const service=awsArchitecture.services.find((s=>s.id===serviceId));if(service){service.activity=1;service.utilization=Math.min(95,service.utilization+25)}}));break;case"batch-hpc":awsArchitecture.addCommunication("batch-job","BATCH_JOB_QUEUE","HPC_CLUSTER_1");awsArchitecture.addCommunication("batch-job","BATCH_JOB_QUEUE","HPC_CLUSTER_2");awsArchitecture.addCommunication("data-transfer","FSX_LUSTRE","HPC_CLUSTER_1");const hpcServices=["HPC_CLUSTER_1","HPC_CLUSTER_2"];hpcServices.forEach((serviceId=>{const service=awsArchitecture.services.find((s=>s.id===serviceId));if(service){service.activity=1;service.utilization=Math.min(98,service.utilization+30)}}));break;case"emr-spark":awsArchitecture.addCommunication("spark-task","EMR_MASTER","SPARK_WORKERS");awsArchitecture.addCommunication("spark-task","EMR_MASTER","EMR_GPU_NODES");awsArchitecture.addCommunication("data-transfer","HDFS_STORAGE","SPARK_WORKERS");const sparkServices=["SPARK_WORKERS","EMR_GPU_NODES"];sparkServices.forEach((serviceId=>{const service=awsArchitecture.services.find((s=>s.id===serviceId));if(service){service.activity=1;service.utilization=Math.min(95,service.utilization+22)}}));break;case"fargate-serverless":awsArchitecture.addCommunication("container-deploy","FARGATE_SERVICE","TRAINING_TASKS");awsArchitecture.addCommunication("container-deploy","FARGATE_SERVICE","DATA_PROCESSING_TASKS");awsArchitecture.addCommunication("data-transfer","DATA_PROCESSING_TASKS","TRAINING_TASKS");const fargateServices=["TRAINING_TASKS","DATA_PROCESSING_TASKS"];fargateServices.forEach((serviceId=>{const service=awsArchitecture.services.find((s=>s.id===serviceId));if(service){service.activity=1;service.utilization=Math.min(90,service.utilization+18)}}));break;case"parallelcluster":awsArchitecture.addCommunication("hpc-job","SLURM_SCHEDULER","GPU_COMPUTE_NODES");awsArchitecture.addCommunication("hpc-job","SLURM_SCHEDULER","CPU_COMPUTE_NODES");awsArchitecture.addCommunication("data-transfer","FSX_SHARED_STORAGE","GPU_COMPUTE_NODES");const parallelServices=["GPU_COMPUTE_NODES","CPU_COMPUTE_NODES"];parallelServices.forEach((serviceId=>{const service=awsArchitecture.services.find((s=>s.id===serviceId));if(service){service.activity=1;service.utilization=Math.min(98,service.utilization+25)}}));break;case"hybrid-multicloud":awsArchitecture.addCommunication("hybrid-sync","DIRECT_CONNECT","ON_PREMISES_DC");awsArchitecture.addCommunication("hybrid-sync","DIRECT_CONNECT","AWS_OUTPOSTS");awsArchitecture.addCommunication("model-sync","MULTI_CLOUD_ORCHESTRATOR","AWS_OUTPOSTS");const hybridServices=["ON_PREMISES_DC","AWS_OUTPOSTS","EDGE_COMPUTING"];hybridServices.forEach((serviceId=>{const service=awsArchitecture.services.find((s=>s.id===serviceId));if(service){service.activity=1;service.utilization=Math.min(92,service.utilization+20)}}));break;case"edge-federated":awsArchitecture.addCommunication("federated","FEDERATED_AGGREGATOR","EDGE_CLUSTER_1");awsArchitecture.addCommunication("federated","FEDERATED_AGGREGATOR","EDGE_CLUSTER_2");awsArchitecture.addCommunication("privacy-check","PRIVACY_COORDINATOR","EDGE_CLUSTER_1");const federatedServices=["EDGE_CLUSTER_1","EDGE_CLUSTER_2","FEDERATED_AGGREGATOR"];federatedServices.forEach((serviceId=>{const service=awsArchitecture.services.find((s=>s.id===serviceId));if(service){service.activity=1;service.utilization=Math.min(85,service.utilization+15)}}));break}}}function pauseTraining(){if(awsArchitecture){awsArchitecture.isTraining=false;const template=awsArchitecture.currentTemplate;switch(template){case"standard":awsArchitecture.addCommunication("checkpoint","SAGEMAKER_TRAINING","S3_DATALAKE");break;case"eks-kubernetes":awsArchitecture.addCommunication("model-sync","EKS_WORKER_GROUP_1","ECR_REGISTRY");break;case"batch-hpc":awsArchitecture.addCommunication("data-transfer","HPC_CLUSTER_1","FSX_LUSTRE");break;case"emr-spark":awsArchitecture.addCommunication("model-sync","EMR_GPU_NODES","HDFS_STORAGE");break;case"parallelcluster":awsArchitecture.addCommunication("data-transfer","GPU_COMPUTE_NODES","FSX_SHARED_STORAGE");break}}}function stopTraining(){if(awsArchitecture){awsArchitecture.isTraining=false;awsArchitecture.trainingProgress=0;document.getElementById("trainingProgress").style.display="none";const template=awsArchitecture.currentTemplate;switch(template){case"standard":awsArchitecture.addCommunication("model-sync","SAGEMAKER_TRAINING","S3_DATALAKE");awsArchitecture.addCommunication("model-sync","EC2_TRAINING_NODES","BEDROCK_MODELS");break;case"eks-kubernetes":awsArchitecture.addCommunication("model-sync","EKS_WORKER_GROUP_1","ECR_REGISTRY");awsArchitecture.addCommunication("model-sync","EKS_WORKER_GROUP_2","ECR_REGISTRY");break;case"batch-hpc":awsArchitecture.addCommunication("data-transfer","HPC_CLUSTER_1","FSX_LUSTRE");awsArchitecture.addCommunication("data-transfer","HPC_CLUSTER_2","FSX_LUSTRE");break;case"emr-spark":awsArchitecture.addCommunication("model-sync","EMR_GPU_NODES","HDFS_STORAGE");awsArchitecture.addCommunication("model-sync","SPARK_WORKERS","HDFS_STORAGE");break;case"edge-federated":awsArchitecture.addCommunication("model-sync","EDGE_CLUSTER_1","FEDERATED_AGGREGATOR");awsArchitecture.addCommunication("model-sync","EDGE_CLUSTER_2","FEDERATED_AGGREGATOR");break}}}function triggerCheckpoint(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;switch(template){case"standard":awsArchitecture.addCommunication("checkpoint","SAGEMAKER_TRAINING","S3_DATALAKE");awsArchitecture.addCommunication("checkpoint","EC2_TRAINING_NODES","S3_DATALAKE");break;case"eks-kubernetes":awsArchitecture.addCommunication("model-sync","EKS_WORKER_GROUP_1","ECR_REGISTRY");awsArchitecture.addCommunication("model-sync","EKS_WORKER_GROUP_2","ECR_REGISTRY");break;case"batch-hpc":awsArchitecture.addCommunication("data-transfer","HPC_CLUSTER_1","FSX_LUSTRE");awsArchitecture.addCommunication("data-transfer","HPC_CLUSTER_2","FSX_LUSTRE");break;case"emr-spark":awsArchitecture.addCommunication("model-sync","EMR_GPU_NODES","HDFS_STORAGE");break;case"parallelcluster":awsArchitecture.addCommunication("data-transfer","GPU_COMPUTE_NODES","FSX_SHARED_STORAGE");break;case"edge-federated":awsArchitecture.addCommunication("model-sync","EDGE_CLUSTER_1","FEDERATED_AGGREGATOR");break}setTimeout((()=>{const locations={standard:"s3://model-checkpoints/epoch-","eks-kubernetes":"ecr://k8s-models/checkpoint-","batch-hpc":"fsx://hpc-checkpoints/job-","emr-spark":"hdfs://spark-models/epoch-","fargate-serverless":"efs://serverless-models/task-",parallelcluster:"lustre://cluster-checkpoints/slurm-","hybrid-multicloud":"multi-cloud://global-models/sync-","edge-federated":"federated://edge-models/round-"};const location=locations[template]||"s3://model-checkpoints/epoch-";alert(`‚úÖ Model checkpoint saved successfully!\nLocation: ${location}${Math.floor(Math.random()*100)}`)}),2e3)}}function validateModel(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;switch(template){case"standard":awsArchitecture.addCommunication("inference","ECS_SERVING","BEDROCK_MODELS");awsArchitecture.addCommunication("data-transfer","S3_DATALAKE","ECS_SERVING");break;case"eks-kubernetes":awsArchitecture.addCommunication("inference","ALB_LOAD_BALANCER","EKS_WORKER_GROUP_1");break;case"batch-hpc":awsArchitecture.addCommunication("batch-job","BATCH_JOB_QUEUE","HPC_CLUSTER_1");break;case"emr-spark":awsArchitecture.addCommunication("spark-task","EMR_MASTER","EMR_GPU_NODES");break;case"fargate-serverless":awsArchitecture.addCommunication("inference","ALB_FARGATE","TRAINING_TASKS");break;case"edge-federated":awsArchitecture.addCommunication("privacy-check","PRIVACY_COORDINATOR","EDGE_CLUSTER_1");break}setTimeout((()=>{const accuracy=(92.5+Math.random()*5).toFixed(2);const f1Score=(.89+Math.random()*.08).toFixed(3);const templateMetrics={standard:"Perplexity","eks-kubernetes":"Pod Efficiency","batch-hpc":"Job Completion Rate","emr-spark":"Partition Processing Rate","fargate-serverless":"Container Startup Time",parallelcluster:"Node Utilization","hybrid-multicloud":"Cross-Cloud Latency","edge-federated":"Privacy Budget"};const metricName=templateMetrics[template]||"Perplexity";const metricValue=(15.2+Math.random()*5).toFixed(1);alert(`üéØ Model Validation Results:\nAccuracy: ${accuracy}%\nF1 Score: ${f1Score}\n${metricName}: ${metricValue}`)}),3e3)}}function triggerDataIngestion(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;switch(template){case"standard":awsArchitecture.addCommunication("data-transfer","S3_DATALAKE","LAMBDA_PREPROCESSING");awsArchitecture.addCommunication("preprocessing","LAMBDA_PREPROCESSING","SAGEMAKER_TRAINING");break;case"eks-kubernetes":awsArchitecture.addCommunication("data-transfer","EFS_STORAGE","EKS_WORKER_GROUP_1");break;case"batch-hpc":awsArchitecture.addCommunication("data-transfer","FSX_LUSTRE","HPC_CLUSTER_1");break;case"emr-spark":awsArchitecture.addCommunication("data-transfer","HDFS_STORAGE","SPARK_WORKERS");break;case"fargate-serverless":awsArchitecture.addCommunication("container-deploy","FARGATE_SERVICE","DATA_PROCESSING_TASKS");break;case"edge-federated":awsArchitecture.addCommunication("data-transfer","DIFFERENTIAL_PRIVACY","FEDERATED_AGGREGATOR");break}const currentData=parseFloat(awsArchitecture.awsMetrics.dataProcessed);awsArchitecture.awsMetrics.dataProcessed=(currentData+.5+Math.random()*.3).toFixed(1)+"TB"}}function triggerPreprocessing(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;switch(template){case"standard":awsArchitecture.addCommunication("preprocessing","LAMBDA_PREPROCESSING","SAGEMAKER_TRAINING");awsArchitecture.addCommunication("preprocessing","LAMBDA_PREPROCESSING","EC2_TRAINING_NODES");break;case"emr-spark":awsArchitecture.addCommunication("preprocessing","JUPYTER_HUB","SPARK_WORKERS");break;case"edge-federated":awsArchitecture.addCommunication("privacy-check","DIFFERENTIAL_PRIVACY","EDGE_CLUSTER_1");break}}}function triggerDataValidation(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;switch(template){case"standard":awsArchitecture.addCommunication("monitoring","S3_DATALAKE","CLOUDWATCH_MONITORING");break;case"eks-kubernetes":awsArchitecture.addCommunication("monitoring","EKS_WORKER_GROUP_1","EKS_CONTROL_PLANE");break;case"batch-hpc":awsArchitecture.addCommunication("monitoring","HPC_CLUSTER_1","BATCH_COMPUTE_ENV");break;case"fargate-serverless":awsArchitecture.addCommunication("monitoring","TRAINING_TASKS","CLOUDWATCH_FARGATE");break;case"edge-federated":awsArchitecture.addCommunication("privacy-check","PRIVACY_COORDINATOR","EDGE_CLUSTER_1");break}setTimeout((()=>{const dataQuality=(96.8+Math.random()*2.5).toFixed(1);const templateMessages={standard:"Schema Compliance: 99.7%","eks-kubernetes":"Pod Readiness: 98.5%","batch-hpc":"Job Queue Health: 99.1%","emr-spark":"Partition Balance: 97.8%","fargate-serverless":"Task Health: 99.3%",parallelcluster:"Node Availability: 98.9%","hybrid-multicloud":"Cross-Cloud Sync: 96.4%","edge-federated":"Privacy Compliance: 100%"};const templateMessage=templateMessages[template]||"Schema Compliance: 99.7%";alert(`üìä Data Validation Complete:\nData Quality Score: ${dataQuality}%\nCorrupted Records: ${Math.floor(Math.random()*50)}\n${templateMessage}`)}),2500)}}function updateInstanceType(){if(awsArchitecture){const instanceType=document.getElementById("instanceType").value;const template=awsArchitecture.currentTemplate;let targetServices=[];switch(template){case"standard":targetServices=["EC2_TRAINING_NODES"];break;case"eks-kubernetes":targetServices=["EKS_WORKER_GROUP_1","EKS_WORKER_GROUP_2"];break;case"batch-hpc":targetServices=["HPC_CLUSTER_1","HPC_CLUSTER_2"];break;case"emr-spark":targetServices=["SPARK_WORKERS","EMR_GPU_NODES"];break;case"parallelcluster":targetServices=["GPU_COMPUTE_NODES","CPU_COMPUTE_NODES"];break}targetServices.forEach((serviceId=>{const service=awsArchitecture.services.find((s=>s.id===serviceId));if(service){service.instanceType=instanceType;const costs={"p4d.24xlarge":434,"p3dn.24xlarge":318,"trn1.32xlarge":245,"inf2.48xlarge":156};service.costPerHour=costs[instanceType]||400}}))}}function scaleOut(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;const centerX=awsArchitecture.canvas.width/4;const centerY=awsArchitecture.canvas.height/4;let newInstance;switch(template){case"standard":newInstance={id:`EC2_SCALE_${Date.now()}`,name:"EC2 Scale Instance",x:200+Math.random()*400,y:200+Math.random()*300,radius:45,baseRadius:45,color:"#ff9500",gradient:["#ff9500","#ff6b35"],activity:0,pulse:0,awsService:"EC2",instanceType:document.getElementById("instanceType").value,vCPUs:96,memory:1152,utilization:45,throughput:"750 tokens/sec",latency:42,healthStatus:"Healthy",launchTime:Date.now(),slaTarget:99,costPerHour:434,isSpot:true,availabilityZone:"us-east-1c",organelles:awsArchitecture.createOrganelles(8),membrane:{thickness:3,opacity:.85},reliabilityScore:98.5};break;case"eks-kubernetes":newInstance={id:`K8S_NODE_${Date.now()}`,name:"K8s Worker Node",x:centerX+100+Math.random()*200,y:centerY+Math.random()*200,radius:50,baseRadius:50,color:"#326ce5",gradient:["#326ce5","#1565c0"],activity:0,pulse:0,awsService:"EKS",instanceType:"c5.4xlarge",vCPUs:16,memory:32,utilization:35,throughput:"580 tokens/sec",latency:28,healthStatus:"Healthy",launchTime:Date.now(),slaTarget:99,costPerHour:185,isSpot:true,availabilityZone:"us-east-1c",organelles:awsArchitecture.createOrganelles(6),membrane:{thickness:3,opacity:.85},reliabilityScore:98.2};break;case"batch-hpc":newInstance={id:`HPC_NODE_${Date.now()}`,name:"HPC Compute Node",x:centerX+Math.random()*300,y:centerY+100+Math.random()*150,radius:55,baseRadius:55,color:"#ff6b6b",gradient:["#ff6b6b","#ff4757"],activity:0,pulse:0,awsService:"Batch",instanceType:"c5n.18xlarge",vCPUs:72,memory:144,utilization:65,throughput:"1.1k jobs/sec",latency:22,healthStatus:"Healthy",launchTime:Date.now(),slaTarget:98.5,costPerHour:325,isSpot:true,availabilityZone:"us-east-1d",organelles:awsArchitecture.createOrganelles(8),membrane:{thickness:4,opacity:.9},reliabilityScore:98};break}if(newInstance){awsArchitecture.services.push(newInstance);awsArchitecture.scaledInstances.push(newInstance);awsArchitecture.logToConsole(`üìà Scaling out: ${newInstance.name} launched`,"success");awsArchitecture.logToConsole(`üí∞ Additional cost: $${newInstance.costPerHour}/hour`,"info");awsArchitecture.updateCostTracker();alert(`üìà New ${template} instance launched!\nInstance: ${newInstance.name}\nCost: $${newInstance.costPerHour}/hour`)}}}function scaleIn(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;let scaleInstance;switch(template){case"standard":scaleInstance=awsArchitecture.services.find((s=>s.id.startsWith("EC2_SCALE_")));break;case"eks-kubernetes":scaleInstance=awsArchitecture.services.find((s=>s.id.startsWith("K8S_NODE_")));break;case"batch-hpc":scaleInstance=awsArchitecture.services.find((s=>s.id.startsWith("HPC_NODE_")));break}if(scaleInstance){const costSavings=scaleInstance.costPerHour;awsArchitecture.services=awsArchitecture.services.filter((s=>s!==scaleInstance));awsArchitecture.scaledInstances=awsArchitecture.scaledInstances.filter((s=>s!==scaleInstance));awsArchitecture.logToConsole(`üìâ Scaling in: ${scaleInstance.name} terminated`,"info");awsArchitecture.logToConsole(`üí∞ Cost savings: $${costSavings}/hour`,"success");awsArchitecture.updateCostTracker();alert(`üìâ Instance terminated gracefully\nCost savings: $${costSavings}/hour`)}else{awsArchitecture.logToConsole("‚ö†Ô∏è No scalable instances found to terminate","warning");alert("No scalable instances found to terminate.")}}}function addSpotInstance(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;const centerX=awsArchitecture.canvas.width/4;const centerY=awsArchitecture.canvas.height/4;const spotInstance={id:`SPOT_${Date.now()}`,name:`${template.toUpperCase()} Spot Instance`,x:300+Math.random()*200,y:150+Math.random()*200,radius:40,baseRadius:40,color:"#ffa502",gradient:["#ffa502","#ff6b35"],activity:0,pulse:0,awsService:template==="eks-kubernetes"?"EKS":"EC2",instanceType:"p3.8xlarge",vCPUs:32,memory:244,utilization:65,throughput:"420 tokens/sec",latency:35,healthStatus:"Healthy",launchTime:Date.now(),slaTarget:95,costPerHour:89,isSpot:true,availabilityZone:"us-east-1d",organelles:awsArchitecture.createOrganelles(6),membrane:{thickness:2,opacity:.8},reliabilityScore:96.5};awsArchitecture.services.push(spotInstance);alert("üí∞ Spot instance launched!\n70% cost savings: $89/hour vs $298/hour")}}function simulateFailure(){if(awsArchitecture&&awsArchitecture.services.length>0){const targetService=awsArchitecture.services[Math.floor(Math.random()*awsArchitecture.services.length)];targetService.healthStatus="Critical";targetService.reliabilityScore=Math.max(80,targetService.reliabilityScore-15);targetService.utilization=0;awsArchitecture.createRipple(targetService.x,targetService.y,"#ff0000");const template=awsArchitecture.currentTemplate;const failureMessages={standard:"EC2 instance failure detected","eks-kubernetes":"Kubernetes pod crashed","batch-hpc":"HPC job failed","emr-spark":"Spark executor failure","fargate-serverless":"Container task stopped",parallelcluster:"Compute node down","hybrid-multicloud":"Cross-cloud link failure","edge-federated":"Edge device disconnected"};const message=failureMessages[template]||"Service failure detected";alert(`üö® CRITICAL FAILURE DETECTED!\n${message}: ${targetService.name}\nAuto-failover initiated...\nEstimated recovery: 2-3 minutes`);setTimeout((()=>{targetService.healthStatus="Healthy";targetService.reliabilityScore=Math.min(99.5,targetService.reliabilityScore+10);targetService.utilization=45+Math.random()*30;alert(`‚úÖ Service ${targetService.name} recovered successfully!`)}),1e4)}}function triggerFailover(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;switch(template){case"standard":awsArchitecture.addCommunication("model-sync","SAGEMAKER_TRAINING","ECS_SERVING");break;case"eks-kubernetes":awsArchitecture.addCommunication("kubernetes","EKS_CONTROL_PLANE","EKS_WORKER_GROUP_2");break;case"hybrid-multicloud":awsArchitecture.addCommunication("hybrid-sync","MULTI_CLOUD_ORCHESTRATOR","AWS_OUTPOSTS");break}const failoverMessages={standard:"Failover to us-west-2 initiated","eks-kubernetes":"Pod rescheduling across nodes","batch-hpc":"Job migration to healthy nodes","emr-spark":"Task redistribution in progress","fargate-serverless":"Container auto-restart initiated",parallelcluster:"Slurm job requeue activated","hybrid-multicloud":"Multi-cloud failover triggered","edge-federated":"Federated learning resumption"};const message=failoverMessages[template]||"Failover initiated";alert(`üîÑ ${message}\nTraffic rerouting in progress...\nRTO: <60 seconds, RPO: <30 seconds`)}}function runHealthCheck(){if(awsArchitecture){awsArchitecture.services.forEach((service=>{awsArchitecture.addCommunication("monitoring",service.id,awsArchitecture.currentTemplate==="standard"?"CLOUDWATCH_MONITORING":awsArchitecture.currentTemplate==="fargate-serverless"?"CLOUDWATCH_FARGATE":"EKS_CONTROL_PLANE")}));setTimeout((()=>{const healthyServices=awsArchitecture.services.filter((s=>s.healthStatus==="Healthy")).length;const totalServices=awsArchitecture.services.length;const overallHealth=(healthyServices/totalServices*100).toFixed(1);const template=awsArchitecture.currentTemplate;const healthMessages={standard:"All AWS services operational","eks-kubernetes":"All Kubernetes nodes ready","batch-hpc":"All HPC clusters available","emr-spark":"All Spark workers healthy","fargate-serverless":"All containers running",parallelcluster:"All compute nodes online","hybrid-multicloud":"All cloud connections stable","edge-federated":"All edge devices connected"};const message=healthMessages[template]||"All systems operational";alert(`‚ù§Ô∏è HEALTH CHECK REPORT:\nHealthy Services: ${healthyServices}/${totalServices}\nOverall Health: ${overallHealth}%\n${message}`)}),3e3)}}function updateSpeed(value){if(awsArchitecture){awsArchitecture.animationSpeed=parseFloat(value);document.getElementById("speedValue").textContent=`${value}x`}}function clearCommunications(){if(awsArchitecture){awsArchitecture.communications=[]}}function togglePause(){if(awsArchitecture){awsArchitecture.isPaused=!awsArchitecture.isPaused;const button=event.target;button.textContent=awsArchitecture.isPaused?"‚ñ∂Ô∏è Resume":"‚è∏Ô∏è Pause"}}function resetArchitecture(){if(awsArchitecture){const currentTemplate=awsArchitecture.currentTemplate;awsArchitecture.services=[];awsArchitecture.communications=[];awsArchitecture.isTraining=false;awsArchitecture.trainingProgress=0;document.getElementById("trainingProgress").style.display="none";const templateDefaults={standard:{trainingInstances:4,gpuUtilization:78,modelParams:"70B",trainingLoss:2.34,throughput:"1.2k tokens/sec",dataProcessed:"2.3TB",networkIO:"450 MB/s",reliabilityScore:99.2,costPerHour:892},"eks-kubernetes":{trainingInstances:6,gpuUtilization:82,modelParams:"70B",trainingLoss:2.28,throughput:"1.4k tokens/sec",dataProcessed:"2.8TB",networkIO:"520 MB/s",reliabilityScore:99,costPerHour:1065},"batch-hpc":{trainingInstances:8,gpuUtilization:95,modelParams:"175B",trainingLoss:2.15,throughput:"2.2k tokens/sec",dataProcessed:"5.5TB",networkIO:"850 MB/s",reliabilityScore:98.5,costPerHour:1650},"emr-spark":{trainingInstances:12,gpuUtilization:88,modelParams:"70B",trainingLoss:2.22,throughput:"1.8k tokens/sec",dataProcessed:"4.2TB",networkIO:"680 MB/s",reliabilityScore:98.8,costPerHour:1285},"fargate-serverless":{trainingInstances:0,gpuUtilization:65,modelParams:"30B",trainingLoss:2.45,throughput:"950 tokens/sec",dataProcessed:"1.8TB",networkIO:"320 MB/s",reliabilityScore:99.5,costPerHour:685},parallelcluster:{trainingInstances:16,gpuUtilization:97,modelParams:"500B",trainingLoss:1.98,throughput:"3.5k tokens/sec",dataProcessed:"12.5TB",networkIO:"1.2 GB/s",reliabilityScore:98.2,costPerHour:2450},"hybrid-multicloud":{trainingInstances:10,gpuUtilization:75,modelParams:"70B",trainingLoss:2.38,throughput:"1.1k tokens/sec",dataProcessed:"3.2TB",networkIO:"580 MB/s",reliabilityScore:97.8,costPerHour:1285},"edge-federated":{trainingInstances:50,gpuUtilization:45,modelParams:"7B",trainingLoss:2.85,throughput:"380 tokens/sec",dataProcessed:"850GB",networkIO:"125 MB/s",reliabilityScore:96.5,costPerHour:485}};awsArchitecture.awsMetrics=templateDefaults[currentTemplate]||templateDefaults["standard"];awsArchitecture.initializeDeploymentTemplate(currentTemplate)}}function getTemplateSpecificAlerts(template,alertType){const alerts={standard:{scaling:"EC2 Auto Scaling Group scaled out",cost:"Monthly cost projection: $19,500",performance:"SageMaker training job completed"},"eks-kubernetes":{scaling:"Kubernetes HPA scaled pods",cost:"Monthly cost projection: $23,200",performance:"All pods running successfully"},"batch-hpc":{scaling:"Batch compute environment expanded",cost:"Monthly cost projection: $35,800",performance:"HPC job queue processing optimally"},"emr-spark":{scaling:"EMR cluster auto-scaled",cost:"Monthly cost projection: $28,500",performance:"Spark job execution completed"},"fargate-serverless":{scaling:"Fargate tasks auto-scaled",cost:"Monthly cost projection: $14,200",performance:"Serverless execution optimal"},parallelcluster:{scaling:"Slurm nodes added to partition",cost:"Monthly cost projection: $52,500",performance:"HPC workload distribution efficient"},"hybrid-multicloud":{scaling:"Multi-cloud resources balanced",cost:"Monthly cost projection: $31,800",performance:"Cross-cloud synchronization stable"},"edge-federated":{scaling:"Edge devices joined federation",cost:"Monthly cost projection: $8,500",performance:"Federated learning round completed"}};return alerts[template]&&alerts[template][alertType]||"Operation completed successfully"}function triggerTemplateSpecificOperation(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;switch(template){case"eks-kubernetes":awsArchitecture.addCommunication("kubernetes","EKS_CONTROL_PLANE","EKS_WORKER_GROUP_1");awsArchitecture.addCommunication("kubernetes","EKS_CONTROL_PLANE","EKS_WORKER_GROUP_2");alert("üéØ Kubernetes HPA triggered\nScaling pods based on CPU utilization\nTarget: 70% CPU utilization");break;case"batch-hpc":awsArchitecture.addCommunication("batch-job","BATCH_JOB_QUEUE","HPC_CLUSTER_1");awsArchitecture.addCommunication("batch-job","BATCH_JOB_QUEUE","HPC_CLUSTER_2");alert("üöÄ Batch job array submitted\n1000 parallel training jobs\nEstimated completion: 6 hours");break;case"emr-spark":awsArchitecture.addCommunication("spark-task","EMR_MASTER","SPARK_WORKERS");awsArchitecture.addCommunication("spark-task","EMR_MASTER","EMR_GPU_NODES");alert("‚ö° Spark job optimization triggered\nDynamic partition rebalancing\nMemory optimization enabled");break;case"fargate-serverless":awsArchitecture.addCommunication("container-deploy","AUTO_SCALING_MANAGER","TRAINING_TASKS");awsArchitecture.addCommunication("container-deploy","AUTO_SCALING_MANAGER","DATA_PROCESSING_TASKS");alert("üìà Serverless auto-scaling triggered\nZero to production in 30 seconds\nPay-per-use pricing active");break;case"parallelcluster":awsArchitecture.addCommunication("hpc-job","SLURM_SCHEDULER","GPU_COMPUTE_NODES");awsArchitecture.addCommunication("hpc-job","SLURM_SCHEDULER","CPU_COMPUTE_NODES");alert("üî¨ HPC job scheduled via Slurm\nMulti-node MPI training\n512 GPU cluster allocation");break;case"hybrid-multicloud":awsArchitecture.addCommunication("hybrid-sync","MULTI_CLOUD_ORCHESTRATOR","ON_PREMISES_DC");awsArchitecture.addCommunication("hybrid-sync","MULTI_CLOUD_ORCHESTRATOR","AWS_OUTPOSTS");alert("üåê Cross-cloud orchestration activated\nWorkload distribution optimized\nLatency-aware scheduling enabled");break;case"edge-federated":awsArchitecture.addCommunication("federated","FEDERATED_AGGREGATOR","EDGE_CLUSTER_1");awsArchitecture.addCommunication("federated","FEDERATED_AGGREGATOR","EDGE_CLUSTER_2");awsArchitecture.addCommunication("privacy-check","PRIVACY_COORDINATOR","EDGE_CLUSTER_1");alert("üîê Federated learning round initiated\n1000+ edge devices participating\nDifferential privacy: Œµ=1.0");break;default:awsArchitecture.addCommunication("data-transfer","S3_DATALAKE","SAGEMAKER_TRAINING");alert("üéØ Standard training operation triggered\nData pipeline activated\nModel training commenced")}}}function showCostOptimization(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;const suggestions={standard:["Use Spot instances for 70% cost reduction","Implement auto-scaling for EC2 instances","Use S3 Intelligent Tiering for storage","Consider Reserved Instances for predictable workloads"],"eks-kubernetes":["Enable cluster autoscaling","Use Spot instances for worker nodes","Implement horizontal pod autoscaling","Optimize container resource requests"],"batch-hpc":["Use Spot fleets for batch jobs","Implement job queues with priority","Use mixed instance types","Consider Savings Plans for sustained usage"],"emr-spark":["Use Spot instances for core/task nodes","Enable auto-scaling for EMR clusters","Optimize Spark configurations","Use appropriate instance types for workload"],"fargate-serverless":["Right-size container resources","Use scheduled scaling for predictable loads","Optimize container startup time","Consider Compute Savings Plans"],parallelcluster:["Use Spot instances for compute nodes","Implement intelligent job scheduling","Use mixed instance families","Optimize storage with FSx Lustre"],"hybrid-multicloud":["Optimize data transfer costs","Use local processing where possible","Implement intelligent workload placement","Consider edge computing for latency-sensitive tasks"],"edge-federated":["Minimize central aggregation frequency","Use compression for model updates","Implement efficient communication protocols","Optimize edge device utilization"]};const templateSuggestions=suggestions[template]||suggestions["standard"];const suggestionText=templateSuggestions.join("\n‚Ä¢ ");alert(`üí∞ Cost Optimization Suggestions for ${template}:\n\n‚Ä¢ ${suggestionText}\n\nImplementing these could save 30-60% on compute costs.`)}}function showPerformanceMetrics(){if(awsArchitecture){const template=awsArchitecture.currentTemplate;const metrics=awsArchitecture.awsMetrics;const templateSpecificMetrics={standard:`\nüîç Standard Pipeline Metrics:\n‚Ä¢ SageMaker Training: ${metrics.gpuUtilization}% GPU utilization\n‚Ä¢ EC2 Instances: ${metrics.trainingInstances} active\n‚Ä¢ Model Parameters: ${metrics.modelParams}\n‚Ä¢ Training Loss: ${metrics.trainingLoss}\n‚Ä¢ Data Throughput: ${metrics.throughput}\n‚Ä¢ Network I/O: ${metrics.networkIO}\n‚Ä¢ Reliability: ${metrics.reliabilityScore}%\n‚Ä¢ Cost: $${metrics.costPerHour}/hour`,"eks-kubernetes":`\nüö¢ Kubernetes Cluster Metrics:\n‚Ä¢ Active Pods: ${metrics.trainingInstances*8}\n‚Ä¢ Node Utilization: ${metrics.gpuUtilization}%\n‚Ä¢ Container Restart Rate: 0.02%\n‚Ä¢ Service Mesh Latency: 2.5ms\n‚Ä¢ Ingress Traffic: ${metrics.networkIO}\n‚Ä¢ Cluster Efficiency: ${metrics.reliabilityScore}%\n‚Ä¢ Monthly Cost: $${Math.round(metrics.costPerHour*24*30)}`,"batch-hpc":`\nüî¨ HPC Batch Metrics:\n‚Ä¢ Running Jobs: ${metrics.trainingInstances*125}\n‚Ä¢ Queue Wait Time: 45 seconds\n‚Ä¢ Job Success Rate: ${metrics.reliabilityScore}%\n‚Ä¢ Compute Efficiency: ${metrics.gpuUtilization}%\n‚Ä¢ Storage I/O: ${metrics.networkIO}\n‚Ä¢ Parallel Efficiency: 94.2%\n‚Ä¢ Cost per Job: $${(metrics.costPerHour/100).toFixed(2)}`,"edge-federated":`\nüåê Federated Learning Metrics:\n‚Ä¢ Connected Devices: ${metrics.trainingInstances*20}\n‚Ä¢ Round Completion: 98.5%\n‚Ä¢ Privacy Budget Used: 15%\n‚Ä¢ Model Accuracy: 94.2%\n‚Ä¢ Communication Overhead: 12%\n‚Ä¢ Device Participation: ${metrics.reliabilityScore}%\n‚Ä¢ Privacy Preserved: 100%`};const displayMetrics=templateSpecificMetrics[template]||templateSpecificMetrics["standard"];alert(displayMetrics)}}function addAdvancedControls(){console.log("Advanced controls for template:",awsArchitecture?.currentTemplate)}function resetAllPanels(){if(panelManager){panelManager.resetAllPanels();alert("üîÑ All panels reset to original positions")}else{console.warn("Panel manager not initialized")}}function minimizeAllPanels(){if(panelManager){panelManager.minimizeAllPanels();alert("üîΩ All panels minimized")}else{console.warn("Panel manager not initialized")}}function showAllPanels(){if(panelManager){panelManager.showAllPanels();alert("üëÅÔ∏è All panels restored")}else{console.warn("Panel manager not initialized")}}function togglePanelLock(){panelsLocked=!panelsLocked;if(panelManager&&panelManager.panels){panelManager.panels.forEach((({element:element})=>{const dragHandle=element.querySelector(".drag-handle");if(dragHandle){if(panelsLocked){dragHandle.style.cursor="default";dragHandle.style.opacity="0.6";element.style.pointerEvents="auto";dragHandle.style.pointerEvents="none"}else{dragHandle.style.cursor="move";dragHandle.style.opacity="1";element.style.pointerEvents="auto";dragHandle.style.pointerEvents="auto"}}}))}const lockButton=document.getElementById("panelLockBtn");if(lockButton){lockButton.textContent=panelsLocked?"üîì Unlock Panels":"üîí Lock Panels";lockButton.classList.toggle("danger",panelsLocked)}console.log(`üîí Panels ${panelsLocked?"locked":"unlocked"}`);alert(`üîí All panels are now ${panelsLocked?"LOCKED":"UNLOCKED"}`)}function saveLayout(){if(!panelManager||!panelManager.panels){alert("‚ùå Panel manager not initialized");return}const layout={};panelManager.panels.forEach((({element:element,config:config})=>{const rect=element.getBoundingClientRect();layout[config.id]={left:element.style.left||rect.left+"px",top:element.style.top||rect.top+"px",display:element.style.display||"block",minimized:element.dataset.minimized==="true",position:element.style.position||"relative"}}));try{localStorage.setItem("awsArchitectureLayout",JSON.stringify(layout));console.log("üíæ Layout saved:",layout);alert("üíæ Panel layout saved successfully!")}catch(error){console.error("Failed to save layout:",error);alert("‚ùå Failed to save layout")}}function loadLayout(){if(!panelManager||!panelManager.panels){alert("‚ùå Panel manager not initialized");return}const savedLayout=localStorage.getItem("awsArchitectureLayout");if(!savedLayout){alert("‚ùå No saved layout found");return}try{const layout=JSON.parse(savedLayout);panelManager.panels.forEach((({element:element,config:config})=>{const panelLayout=layout[config.id];if(panelLayout){if(panelLayout.position){element.style.position=panelLayout.position}element.style.left=panelLayout.left||"";element.style.top=panelLayout.top||"";element.style.display=panelLayout.display||"";if(panelLayout.minimized&&element.dataset.minimized!=="true"){panelManager.toggleMinimize(element)}else if(!panelLayout.minimized&&element.dataset.minimized==="true"){panelManager.toggleMinimize(element)}}}));console.log("üìÅ Layout loaded:",layout);alert("üìÅ Panel layout loaded successfully!")}catch(error){console.error("‚ùå Failed to load layout:",error);alert("‚ùå Failed to load saved layout")}}let autoSaveTimeout;function scheduleAutoSave(){clearTimeout(autoSaveTimeout);autoSaveTimeout=setTimeout((()=>{if(panelManager&&!panelsLocked){saveLayout();console.log("üîÑ Auto-saved panel layout")}}),3e4)}if(panelManager){const originalEndDrag=panelManager.endDrag.bind(panelManager);panelManager.endDrag=function(e){originalEndDrag(e);scheduleAutoSave()}}document.addEventListener("keydown",(e=>{if(e.target.tagName==="INPUT"||e.target.tagName==="TEXTAREA")return;if(e.ctrlKey||e.metaKey){switch(e.key.toLowerCase()){case"r":e.preventDefault();resetAllPanels();break;case"m":e.preventDefault();minimizeAllPanels();break;case"s":e.preventDefault();saveLayout();break;case"l":e.preventDefault();togglePanelLock();break}}}));function showKeyboardShortcuts(){const shortcuts=`\nüéõÔ∏è Panel Management Keyboard Shortcuts:\n\n‚Ä¢ Ctrl/Cmd + R: Reset all panels\n‚Ä¢ Ctrl/Cmd + M: Minimize all panels\n‚Ä¢ Ctrl/Cmd + S: Save current layout\n‚Ä¢ Ctrl/Cmd + L: Lock/unlock panels\n\nüñ±Ô∏è Mouse Actions:\n‚Ä¢ Click & Drag: Move panels\n‚Ä¢ Double-click header: Minimize/restore panel\n‚Ä¢ Right-click header: Context menu\n‚Ä¢ Grid snapping: Automatic when dragging\n\nüéØ Panel Features:\n‚Ä¢ All panels remember their positions\n‚Ä¢ Auto-save every 30 seconds after moving\n‚Ä¢ Constrained to viewport boundaries\n‚Ä¢ Visual feedback during dragging\n    `;alert(shortcuts)}function addKeyboardShortcutsButton(){const systemControls=document.querySelector(".control-section:last-child .control-group:last-child");if(systemControls){const shortcutsBtn=document.createElement("button");shortcutsBtn.textContent="‚å®Ô∏è Shortcuts";shortcutsBtn.className="secondary";shortcutsBtn.onclick=showKeyboardShortcuts;systemControls.appendChild(shortcutsBtn)}}document.addEventListener("DOMContentLoaded",addKeyboardShortcutsButton);window.changeDeploymentTemplate=changeDeploymentTemplate;window.triggerTemplateSpecificOperation=triggerTemplateSpecificOperation;window.showCostOptimization=showCostOptimization;window.showPerformanceMetrics=showPerformanceMetrics;window.panelManager=panelManager;